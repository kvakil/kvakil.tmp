<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Keyhan Vakil's Blog</title>
    <link href="https://kvakil.me/atom.xml" rel="self" />
    <link href="https://kvakil.me" />
    <id>https://kvakil.me/atom.xml</id>
    <author>
        <name>Keyhan Vakil</name>
        
        <email>ken@kvakil.me</email>
        
    </author>
    <updated>2023-12-07T00:00:00Z</updated>
    <entry>
    <title>Node.js Startup: V8 changes</title>
    <link href="https://kvakil.me/posts/2023-12-07-nodejs-startup-series-v8-changes.html" />
    <id>https://kvakil.me/posts/2023-12-07-nodejs-startup-series-v8-changes.html</id>
    <published>2023-12-07T00:00:00Z</published>
    <updated>2023-12-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Node.js Startup: V8 changes</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;nodejs-startup&#39;." href="/tags/nodejs-startup.html" rel="tag">nodejs-startup</a>, <a title="All pages tagged &#39;low-level&#39;." href="/tags/low-level.html" rel="tag">low-level</a></p>
        <p>In our <a href="https://kvakil.me/posts/2023-05-22-nodejs-startup-series-removing-code-cache-copies.html">previous post</a>, we made a lot of progress on the Node.js side
towards speeding up initialization. Now it’s time to dive deeper, and see
changes we need to make to V8 itself.</p>
<h2 id="stop-copying-builtins">Stop copying builtins</h2>
<p>Continuing on the theme of the <a href="https://kvakil.me/posts/2023-05-22-nodejs-startup-series-removing-code-cache-copies.html">previous post</a>, I noticed there was still
one more unaddressed large memcpy call.</p>
<p>V8 includes “builtin” functions, which power common Javascript features like
sorting an array. V8 builtins are <a href="https://v8.dev/blog/embedded-builtins">included once in the binary and shared
across different V8 instances via mmap</a>. For <a href="https://v8.dev/blog/short-builtin-calls">performance
reasons</a>, it’s important that the builtin calls are “short jumps” away
from the code generated by V8’s JIT: the generated builtin code should be near
(in terms of virtual memory offsets) the compiled Javascript code to allow for
efficient jumps. However it’s not always possible to ensure that this happens,
so V8’s solution is to copy the builtins to be near the generated Javascript
code when initializing the V8 isolate.</p>
<p>This copying process is expensive since the builtins are quite large (~1.5 MiB
today). Rather than copying the builtins, V8 attempts to mmap the builtins into
the correct place. It parses <code>/proc/self/maps</code> to find out where the binary is
in memory and where the builtins are located in the binary, and then remaps the
binary’s builtins to the correct spot in memory. This means that there are
multiple virtual memory addresses in the process pointing to the same physical
memory address used by the builtins.</p>
<p>Doing this correctly is a little tricky:</p>
<blockquote>
<p>Now we have a file descriptor to the same path the data we want to remap
comes from. But… is it the <em>same</em> file? This is not guaranteed (e.g. in
case of updates), so to avoid hard-to-track bugs, check that the
underlying file is the same using the device number and the inode. Inodes
are not unique across filesystems, and can be reused. The check works
here though, since we have the problems:</p>
<ul>
<li>Inode uniqueness: check device numbers.</li>
<li>Inode reuse: the initial file is still open, since we are running code
from it. So its inode cannot have been reused.</li>
</ul>
</blockquote>
<p>However, the code to parse <code>/proc/self/maps</code> was broken in certain cases.
This is what it looked like (<a href="https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:v8/src/base/platform/platform-linux.cc;drc=e0e0d24aaa54727dc0a8bc4b159ccdf80d3f5d8d;l=141">more context</a>):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>MemoryRegion region<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">uint8_t</span> dev_major <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> dev_minor <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">uintptr_t</span> inode <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> path_index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">uintptr_t</span> offset <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">// The format is:</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">// address           perms offset  dev   inode   pathname</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">// 08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(</span>sscanf<span class="op">(</span>line<span class="op">,</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;%&quot;</span> V8PRIxPTR <span class="st">&quot;-%&quot;</span> V8PRIxPTR <span class="st">&quot; </span><span class="sc">%4c</span><span class="st"> %&quot;</span> V8PRIxPTR</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot; </span><span class="sc">%hhx</span><span class="st">:</span><span class="sc">%hhx</span><span class="st"> %&quot;</span> V8PRIdPTR <span class="st">&quot; </span><span class="sc">%n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>           <span class="op">&amp;</span>region<span class="op">.</span>start<span class="op">,</span> <span class="op">&amp;</span>region<span class="op">.</span>end<span class="op">,</span> region<span class="op">.</span>permissions<span class="op">,</span> <span class="op">&amp;</span>offset<span class="op">,</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>           <span class="op">&amp;</span>dev_major<span class="op">,</span> <span class="op">&amp;</span>dev_minor<span class="op">,</span> <span class="op">&amp;</span>inode<span class="op">,</span> <span class="op">&amp;</span>path_index<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">7</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> base<span class="op">::</span>nullopt<span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co">// &lt;snip&gt;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>region<span class="op">.</span>dev <span class="op">=</span> makedev<span class="op">(</span>dev_major<span class="op">,</span> dev_minor<span class="op">);</span></span></code></pre></div>
<p><code>dev_major</code> and <code>dev_minor</code> are actually not <code>uint8_t</code>: <code>dev_major</code> can use up
to 12 bits and <code>dev_minor</code> can use up to 20 bits. This meant that, depending on
what filesystem the executable was on, V8 would fallback to copying the
builtins when it was not really necessary. Technically using scanf to read an
integer which is too-big is undefined behavior, but in practice implementations
will just silently truncate the conversion.</p>
<p>On my local machine, <code>dev_major</code> was small and the mmaping worked fine. But on
the Amazon EC2 instance I was benchmarking on, the NVMe SSDs have a major
device number of 0x103. That doesn’t fit in a <code>uint8_t</code>, so V8 got confused and
fell back to copying the builtins. The fix was <a href="https://chromium-review.googlesource.com/c/v8/v8/+/4514756">straightforward</a>: I
changed <code>dev_major</code> and <code>dev_minor</code> to be <code>unsigned int</code>, and therefore
speeding up initialization by ~500 microseconds and saving 1.6 MiB of memory.</p>
<p>This is a great example of (1) why you should profile in an environment which
closely matches your “production” environment and (2) why implicit integer
casting in C/C++ is evil. In a language like Rust, where integer casting is
explicit, you would need a cast to correctly type the arguments to <code>makedev</code>
(since <code>makedev</code> takes in two unsigned ints). Hopefully the need for a cast
would tip off the developer that device numbers may actually be bigger than
<code>uint8_t</code>s. (But maybe not! The cast is infallible, which makes it much more
likely to be overlooked.)</p>
<h2 id="stop-recompiling">Stop recompiling</h2>
<p>The next thing <a href="/assets/nodejs-startup-flamegraph.svg?x=435.4&amp;y=404&amp;s=null">I noticed from the flamegraph is that we were spending
time compiling
functions</a>.</p>
<noscript>
Sorry, you need Javascript to view the flamegraph. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
<p>This was surprising to me. Last time we <a href="https://kvakil.me/posts/2023-05-22-nodejs-startup-series-removing-code-cache-copies.html">learned about the code cache</a>. The
code cache should have eagerly precompiled <em>everything</em>, so we shouldn’t be
compiling <em>anything</em>.</p>
<p>Single-stepping through the debugger revealed that the cause was incredibly
simple: the relevant line in the V8 source code was commented out!</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// flags.set_eager(compile_options == ScriptCompiler::kEagerCompile);</span></span></code></pre></div>
<p>Node.js was using the kEagerCompile to ensure that all functions get
compiled and put into the code cache, but it was being ignored. The
default is that V8 uses <a href="https://v8.dev/blog/code-caching-for-devs">some heuristics</a> to guess which functions
should be compiled. I <a href="https://chromium-review.googlesource.com/c/v8/v8/+/4571822">uncommented the line</a>, which fixed the
issue. Unfortunately this makes the code cache larger, which makes it
take longer to deserialize and increases its memory footprint. For the
latter issue, it’s a good thing that we’ve removed the extra code cache
copies in our <a href="https://kvakil.me/posts/2023-05-22-nodejs-startup-series-removing-code-cache-copies.html">previous post</a>!</p>
<h2 id="stop-snapshot-checksumming">Stop snapshot checksumming</h2>
<p>While profiling I <a href="/assets/nodejs-startup-flamegraph.svg?s=null&amp;x=340.3&amp;y=212">noticed from the
flamegraph</a>
is that we were spending a decent bit of time running a CRC checksum on
the snapshot.</p>
<p>This checksumming was supposed to only happen in debug modes, but it wasn’t
because the snapshot mode that Node.js used just didn’t have the flag. <a href="https://chromium-review.googlesource.com/c/v8/v8/+/4571989">I added
the flag check in</a>, speeding up startup by another 500 microseconds.</p>
    </section>
    <section class="header">
        
            by Keyhan Vakil
        
        Posted on 2023-12-07
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Remote builds with AWS Spot Instances</title>
    <link href="https://kvakil.me/posts/2023-11-26-spot-build-bot.html" />
    <id>https://kvakil.me/posts/2023-11-26-spot-build-bot.html</id>
    <published>2023-11-26T00:00:00Z</published>
    <updated>2023-11-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Remote builds with AWS Spot Instances</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;selfhosted&#39;." href="/tags/selfhosted.html" rel="tag">selfhosted</a></p>
        <p>Occasionally I contribute to open-source projects. Some of these
projects are really big and compiling them takes a long time. This is
usually not a problem in industry: either you’ll get an expensive
desktop machine or remote build access to a fleet of expensive “build
bot” machines.</p>
<p>Unfortunately I don’t have either of those – my laptop is nine years
old and was nowhere near state-of-the-art when I bought it. Compiling a
large open-source project like Node.js from scratch takes <em>hours</em>.</p>
<p>Anyway I used to get around this by having a beefy 32-core Amazon EC2
instance in the cloud. I would turn it on only when I was using it, and
there is a crontab configured to automatically shut-off the instance
every night in case I forget. There is a monthly charge for the <a href="https://aws.amazon.com/ebs/pricing/">disk
storage</a>, but it’s comparatively cheap. But even with careful stopping
and starting of the instance, it ends up being more expensive than I
would like. I spend a lot of time reading and writing code, and not
compiling it. But regardless of whether the CPUs are completely idle or
spinning at 100%, I’m paying Amazon multiple dollars per hour.</p>
<p>In addition to their on-demand instances, AWS provides “spot instances”,
which can be up to 90% cheaper. In exchange, you have to deal with
“interruptions”, where AWS can decide to terminate your instance in
order to get extra capacity.</p>
<p>I decided to create a “remote runner” tool. The idea is that I would run
<code>remote_run make test</code>, and it would:</p>
<ul>
<li>Start up a spot instance.</li>
<li>Send it the <code>make test</code> command and show me the results locally.</li>
<li>Have the spot machine linger around for a while (in case I have a
quick follow-up command) before shutting down.</li>
</ul>
<h2 id="boring-nitty-gritty-details">Boring nitty gritty details</h2>
<p>This ended up being much trickier than I imagined, mostly because I had
a simplistic model of how AWS worked. Here’s what I ended up building in
practice:</p>
<figure>
<img src="/assets/build-bot-ugly.png" alt="Build bot “architecture” diagram" />
<figcaption aria-hidden="true">Build bot “architecture” diagram</figcaption>
</figure>
<p>First, there are various build dependencies which need to be on the
root disk in order to actually do the build. We could install them
whenever we run a command but that would add significantly to the
start time. Instead we build an “AMI”, which is Amazon speak for a
virtual machine image. I used <a href="https://developer.hashicorp.com/packer">Hashicorp’s Packer</a> to do this.
This is a “one-time” setup, although you’ll have to do it
“one-more-time” whenever you add new build dependencies.</p>
<p>Next, we need to store the build artifacts and repositories
somewhere. This was easy for on-demand instances, because there was a
single instance and it could just have an EBS volume attached. For
spot instances this ended up being tricky: you need to manually
attach the EBS volume and mount it on the machine when it starts.</p>
<p>At this point I was able to start actually running build commands. I
added a <code>git push</code> over SSH to sync up my local code to the remote,
and got my first build passing :)</p>
<p>The runtime for doing a small command like <code>remote_run echo 1</code> was
unacceptably slow even when the spot instance was already warm: 2-3
seconds. One of those seconds was because the spot instance IP
required AWS API calls which were not fast. I built a “local cache”
which stored the last known IP. Establishing new SSH connections for
each command took an additional second, I used <a href="https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing">OpenSSH’s
multiplexing</a> feature which brought it down to ~60ms.</p>
<p>Then there were a bunch of annoying edge cases, like handling running
a command when a spot instance was shutting down or starting up, or
trying to make the remote runner robust even when I pressed Ctrl-C
halfway through the pipeline.</p>
<p>Annoyingly, while testing my code I started getting random errors. AWS
informed me that they suspected that my account had been compromised. I
suspect the average cryptomining workload looks pretty similar to this,
although theirs is perhaps more economically productive.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The end result of all this toil:</p>
<ol type="1">
<li>I can do builds really fast! My most complicated projects can do a
full compile in ~minutes.</li>
<li>“Cold” commands take around 20-30 seconds for the spot EC2 instance
to become ready, and then degraded performance while the EBS volume
warms up.</li>
<li>“Warm” commands take an additional ~100ms which is very reasonable.</li>
</ol>
<p>Against my better judgement, here is the full code. It’s a series of
unprincipled hacks (and using StrictHostKeyChecking=no is dangerous),
but it works well for my workflow.</p>
<details>
<summary>
Python Code
</summary>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> boto3</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> subprocess</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> time</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> base64</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> json</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> botocore.exceptions <span class="im">import</span> ClientError</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> shlex <span class="im">import</span> quote</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> functools <span class="im">import</span> wraps</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> time <span class="im">import</span> time, sleep</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>base_ssh_command <span class="op">=</span> <span class="va">None</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>ec2 <span class="op">=</span> boto3.client(<span class="st">&quot;ec2&quot;</span>, region_name<span class="op">=</span><span class="st">&quot;us-west-2&quot;</span>)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>fp <span class="op">=</span> <span class="st">&quot;/b/v8/v8&quot;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>volume_id <span class="op">=</span> <span class="st">&quot;vol-xxxxxxxxxxxxxxxxx&quot;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>verbose <span class="op">=</span> <span class="va">False</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Color:</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    GREEN <span class="op">=</span> <span class="st">&quot;</span><span class="ch">\033</span><span class="st">[1;32;48m&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    RED <span class="op">=</span> <span class="st">&quot;</span><span class="ch">\033</span><span class="st">[1;31;48m&quot;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    BLUE <span class="op">=</span> <span class="st">&quot;</span><span class="ch">\033</span><span class="st">[1;34;48m&quot;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    END <span class="op">=</span> <span class="st">&quot;</span><span class="ch">\033</span><span class="st">[1;37;0m&quot;</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> verbose_timing(f):</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="at">@wraps</span>(f)</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> wrap(<span class="op">*</span>args, <span class="op">**</span>kw):</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        ts <span class="op">=</span> time()</span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">{</span>Color<span class="sc">.</span>BLUE<span class="sc">}</span><span class="ss">running </span><span class="sc">{</span>f<span class="sc">.</span><span class="va">__name__</span><span class="sc">}{</span>Color<span class="sc">.</span>END<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        error <span class="op">=</span> <span class="va">None</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span>:</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>            result <span class="op">=</span> f(<span class="op">*</span>args, <span class="op">**</span>kw)</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">except</span> <span class="pp">Exception</span> <span class="im">as</span> e:</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>            error <span class="op">=</span> e</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>        te <span class="op">=</span> time()</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        diff <span class="op">=</span> te <span class="op">-</span> ts</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> diff <span class="op">&gt;</span> <span class="dv">2</span>:</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>            diff_nice <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>diff<span class="sc">:2.4f}</span><span class="ss"> sec&quot;</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>            diff_nice <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span><span class="bu">int</span>(diff<span class="op">*</span><span class="dv">1000</span>)<span class="sc">}</span><span class="ss"> ms&quot;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> error:</span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">{</span>Color<span class="sc">.</span>RED<span class="sc">}</span><span class="ss">... failed in </span><span class="sc">{</span>diff_nice<span class="sc">}{</span>Color<span class="sc">.</span>END<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>            <span class="cf">raise</span> error</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">{</span>Color<span class="sc">.</span>GREEN<span class="sc">}</span><span class="ss">... done in </span><span class="sc">{</span>diff_nice<span class="sc">}{</span>Color<span class="sc">.</span>END<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> result</span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> wrap</span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>timing <span class="op">=</span> verbose_timing <span class="cf">if</span> verbose <span class="cf">else</span> <span class="kw">lambda</span> f: f</span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_instance_information(instance_name):</span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>    instances <span class="op">=</span> ec2.describe_instances(</span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>        Filters<span class="op">=</span>[</span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>            {<span class="st">&quot;Name&quot;</span>: <span class="st">&quot;instance-state-name&quot;</span>, <span class="st">&quot;Values&quot;</span>: [<span class="st">&quot;pending&quot;</span>, <span class="st">&quot;running&quot;</span>]},</span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>            {<span class="st">&quot;Name&quot;</span>: <span class="st">&quot;tag:Name&quot;</span>, <span class="st">&quot;Values&quot;</span>: [instance_name]},</span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        ]</span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> reservation <span class="kw">in</span> instances[<span class="st">&quot;Reservations&quot;</span>]:</span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> instance <span class="kw">in</span> reservation[<span class="st">&quot;Instances&quot;</span>]:</span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> {</span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;public_ip&quot;</span>: instance[<span class="st">&quot;NetworkInterfaces&quot;</span>][<span class="dv">0</span>][<span class="st">&quot;Association&quot;</span>][</span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&quot;PublicIp&quot;</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>                ],</span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;instance_id&quot;</span>: instance[<span class="st">&quot;InstanceId&quot;</span>],</span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;has_volume&quot;</span>: <span class="bu">any</span>(</span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>                    (</span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>                        bdm[<span class="st">&quot;Ebs&quot;</span>][<span class="st">&quot;VolumeId&quot;</span>] <span class="op">==</span> volume_id</span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> bdm <span class="kw">in</span> instance[<span class="st">&quot;BlockDeviceMappings&quot;</span>]</span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>                    )</span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>                ),</span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;state&quot;</span>: instance[<span class="st">&quot;State&quot;</span>][<span class="st">&quot;Name&quot;</span>],</span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>            }</span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> request_spot_instance(instance_name, instance_type):</span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>    request <span class="op">=</span> {</span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;MaxCount&quot;</span>: <span class="dv">1</span>,</span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;MinCount&quot;</span>: <span class="dv">1</span>,</span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;ImageId&quot;</span>: <span class="st">&quot;ami-xxxxxxxxxxxxxxxxx&quot;</span>,</span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;InstanceType&quot;</span>: instance_type,</span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;InstanceInitiatedShutdownBehavior&quot;</span>: <span class="st">&quot;terminate&quot;</span>,</span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;KeyName&quot;</span>: instance_name,</span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;EbsOptimized&quot;</span>: <span class="va">True</span>,</span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;UserData&quot;</span>: base64.b64encode(</span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>            <span class="st">b&#39;#!/bin/bash</span><span class="ch">\n</span><span class="st">echo &quot;shutdown -h now&quot; | at now + 5 min</span><span class="ch">\n</span><span class="st">&#39;</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>        ).decode(<span class="st">&quot;utf8&quot;</span>),</span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;NetworkInterfaces&quot;</span>: [</span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>            {</span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;SubnetId&quot;</span>: <span class="st">&quot;subnet-xxxxxxxxxxxxxxxxx&quot;</span>,</span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;AssociatePublicIpAddress&quot;</span>: <span class="va">True</span>,</span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;DeviceIndex&quot;</span>: <span class="dv">0</span>,</span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;Groups&quot;</span>: [<span class="st">&quot;sg-xxxxxxxxxxxxxxxxx&quot;</span>],</span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>            }</span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>        ],</span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;TagSpecifications&quot;</span>: [</span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>            {</span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;ResourceType&quot;</span>: <span class="st">&quot;instance&quot;</span>,</span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;Tags&quot;</span>: [{<span class="st">&quot;Key&quot;</span>: <span class="st">&quot;Name&quot;</span>, <span class="st">&quot;Value&quot;</span>: <span class="st">&quot;build-bot&quot;</span>}],</span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>            }</span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>        ],</span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;InstanceMarketOptions&quot;</span>: {<span class="st">&quot;MarketType&quot;</span>: <span class="st">&quot;spot&quot;</span>},</span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;MetadataOptions&quot;</span>: {</span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;HttpTokens&quot;</span>: <span class="st">&quot;required&quot;</span>,</span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;HttpEndpoint&quot;</span>: <span class="st">&quot;enabled&quot;</span>,</span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;HttpPutResponseHopLimit&quot;</span>: <span class="dv">2</span>,</span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;PrivateDnsNameOptions&quot;</span>: {</span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;HostnameType&quot;</span>: <span class="st">&quot;ip-name&quot;</span>,</span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;EnableResourceNameDnsARecord&quot;</span>: <span class="va">False</span>,</span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;EnableResourceNameDnsAAAARecord&quot;</span>: <span class="va">False</span>,</span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>    response <span class="op">=</span> ec2.run_instances(<span class="op">**</span>request)</span>
<span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> response[<span class="st">&quot;Instances&quot;</span>][<span class="dv">0</span>][<span class="st">&quot;SpotInstanceRequestId&quot;</span>]</span>
<span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> wait_for_spot_instance_request(spot_request_id):</span>
<span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>        response <span class="op">=</span> ec2.describe_spot_instance_requests(</span>
<span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>            SpotInstanceRequestIds<span class="op">=</span>[spot_request_id]</span>
<span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a>        state <span class="op">=</span> response[<span class="st">&quot;SpotInstanceRequests&quot;</span>][<span class="dv">0</span>][<span class="st">&quot;State&quot;</span>]</span>
<span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> state <span class="op">==</span> <span class="st">&quot;active&quot;</span>:</span>
<span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>            instance_id <span class="op">=</span> response[<span class="st">&quot;SpotInstanceRequests&quot;</span>][<span class="dv">0</span>][<span class="st">&quot;InstanceId&quot;</span>]</span>
<span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> instance_id</span>
<span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>        <span class="cf">elif</span> state <span class="op">==</span> <span class="st">&quot;failed&quot;</span>:</span>
<span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>            <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&quot;Spot instance request failed.&quot;</span>)</span>
<span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a>        sleep(<span class="dv">1</span>)</span>
<span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> attach_volume(instance_id):</span>
<span id="cb1-141"><a href="#cb1-141" aria-hidden="true" tabindex="-1"></a>    last_error <span class="op">=</span> <span class="va">None</span></span>
<span id="cb1-142"><a href="#cb1-142" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> retries <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">60</span>):</span>
<span id="cb1-143"><a href="#cb1-143" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span>:</span>
<span id="cb1-144"><a href="#cb1-144" aria-hidden="true" tabindex="-1"></a>            response <span class="op">=</span> ec2.attach_volume(</span>
<span id="cb1-145"><a href="#cb1-145" aria-hidden="true" tabindex="-1"></a>                Device<span class="op">=</span><span class="st">&quot;/dev/sdf&quot;</span>, InstanceId<span class="op">=</span>instance_id, VolumeId<span class="op">=</span>volume_id</span>
<span id="cb1-146"><a href="#cb1-146" aria-hidden="true" tabindex="-1"></a>            )</span>
<span id="cb1-147"><a href="#cb1-147" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb1-148"><a href="#cb1-148" aria-hidden="true" tabindex="-1"></a>        <span class="cf">except</span> ClientError <span class="im">as</span> e:</span>
<span id="cb1-149"><a href="#cb1-149" aria-hidden="true" tabindex="-1"></a>            str_e <span class="op">=</span> <span class="bu">str</span>(e)</span>
<span id="cb1-150"><a href="#cb1-150" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="st">&quot;(VolumeInUse)&quot;</span> <span class="kw">in</span> str_e <span class="kw">or</span> <span class="st">&quot;is not &#39;running&#39;.&quot;</span> <span class="kw">in</span> str_e:</span>
<span id="cb1-151"><a href="#cb1-151" aria-hidden="true" tabindex="-1"></a>                last_error <span class="op">=</span> e</span>
<span id="cb1-152"><a href="#cb1-152" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb1-153"><a href="#cb1-153" aria-hidden="true" tabindex="-1"></a>                <span class="cf">raise</span> e</span>
<span id="cb1-154"><a href="#cb1-154" aria-hidden="true" tabindex="-1"></a>            sleep(<span class="dv">1</span>)</span>
<span id="cb1-155"><a href="#cb1-155" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb1-156"><a href="#cb1-156" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> last_error</span>
<span id="cb1-157"><a href="#cb1-157" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> response</span>
<span id="cb1-158"><a href="#cb1-158" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-159"><a href="#cb1-159" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-160"><a href="#cb1-160" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-161"><a href="#cb1-161" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> mount_when_ready(public_ip, key_file_path):</span>
<span id="cb1-162"><a href="#cb1-162" aria-hidden="true" tabindex="-1"></a>    ssh_command <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>base_ssh_command<span class="sc">}</span><span class="ss"> ubuntu@</span><span class="sc">{</span>public_ip<span class="sc">}</span><span class="ss"> &#39;mountpoint /b &gt;/dev/null || </span><span class="ch">{{</span><span class="ss"> sudo mount /dev/nvme1n1 /b || sudo mount /dev/sdf /b || sudo mount /dev/xvdf /b; </span><span class="ch">}}</span><span class="ss">&#39;&quot;</span></span>
<span id="cb1-163"><a href="#cb1-163" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> subprocess.call(ssh_command, shell<span class="op">=</span><span class="va">True</span>) <span class="op">!=</span> <span class="dv">0</span>:</span>
<span id="cb1-164"><a href="#cb1-164" aria-hidden="true" tabindex="-1"></a>        sleep(<span class="fl">0.1</span>)</span>
<span id="cb1-165"><a href="#cb1-165" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-166"><a href="#cb1-166" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-167"><a href="#cb1-167" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-168"><a href="#cb1-168" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sync_changes_to_git():</span>
<span id="cb1-169"><a href="#cb1-169" aria-hidden="true" tabindex="-1"></a>    subprocess.check_call(</span>
<span id="cb1-170"><a href="#cb1-170" aria-hidden="true" tabindex="-1"></a>        <span class="st">&#39;git add -u &amp;&amp; git commit --allow-empty -m&quot;for build&quot;&#39;</span>, shell<span class="op">=</span><span class="va">True</span></span>
<span id="cb1-171"><a href="#cb1-171" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb1-172"><a href="#cb1-172" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> subprocess.check_output([<span class="st">&quot;git&quot;</span>, <span class="st">&quot;rev-parse&quot;</span>, <span class="st">&quot;HEAD&quot;</span>]).strip().decode(<span class="st">&quot;utf-8&quot;</span>)</span>
<span id="cb1-173"><a href="#cb1-173" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-174"><a href="#cb1-174" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-175"><a href="#cb1-175" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-176"><a href="#cb1-176" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> push_git_sha(public_ip, key_file_path, git_sha):</span>
<span id="cb1-177"><a href="#cb1-177" aria-hidden="true" tabindex="-1"></a>    ssh_command <span class="op">=</span> (</span>
<span id="cb1-178"><a href="#cb1-178" aria-hidden="true" tabindex="-1"></a>        <span class="ss">f&quot;git push -f ssh://ubuntu@</span><span class="sc">{</span>public_ip<span class="sc">}{</span>fp<span class="sc">}</span><span class="ss"> HEAD:refs/heads/for-spot-build&quot;</span></span>
<span id="cb1-179"><a href="#cb1-179" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb1-180"><a href="#cb1-180" aria-hidden="true" tabindex="-1"></a>    subprocess.check_call(ssh_command, shell<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb1-181"><a href="#cb1-181" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-182"><a href="#cb1-182" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-183"><a href="#cb1-183" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-184"><a href="#cb1-184" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> setup_build(public_ip, key_file_path, git_sha):</span>
<span id="cb1-185"><a href="#cb1-185" aria-hidden="true" tabindex="-1"></a>    ssh_command <span class="op">=</span> (</span>
<span id="cb1-186"><a href="#cb1-186" aria-hidden="true" tabindex="-1"></a>        <span class="ss">f&quot;</span><span class="sc">{</span>base_ssh_command<span class="sc">}</span><span class="ss"> ubuntu@</span><span class="sc">{</span>public_ip<span class="sc">}</span><span class="ss"> &#39;cd </span><span class="sc">{</span>fp<span class="sc">}</span><span class="ss"> &amp;&amp; git checkout -q </span><span class="sc">{</span>git_sha<span class="sc">}</span><span class="ss">&#39;&quot;</span></span>
<span id="cb1-187"><a href="#cb1-187" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb1-188"><a href="#cb1-188" aria-hidden="true" tabindex="-1"></a>    subprocess.check_call(ssh_command, shell<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb1-189"><a href="#cb1-189" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-190"><a href="#cb1-190" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-191"><a href="#cb1-191" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> run_command(public_ip, key_file_path, user_command):</span>
<span id="cb1-192"><a href="#cb1-192" aria-hidden="true" tabindex="-1"></a>    ssh_command <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>base_ssh_command<span class="sc">}</span><span class="ss"> ubuntu@</span><span class="sc">{</span>public_ip<span class="sc">}</span><span class="ss"> </span><span class="sc">{</span>quote(user_command)<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb1-193"><a href="#cb1-193" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb1-194"><a href="#cb1-194" aria-hidden="true" tabindex="-1"></a>        subprocess.call(ssh_command, shell<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb1-195"><a href="#cb1-195" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">KeyboardInterrupt</span>:</span>
<span id="cb1-196"><a href="#cb1-196" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span>
<span id="cb1-197"><a href="#cb1-197" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-198"><a href="#cb1-198" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-199"><a href="#cb1-199" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-200"><a href="#cb1-200" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> rsync_from_remote(public_ip, key_file_path, remote_path, local_path):</span>
<span id="cb1-201"><a href="#cb1-201" aria-hidden="true" tabindex="-1"></a>    rsync_command <span class="op">=</span> <span class="ss">f&quot;rsync --info=progress2 -a -r -e &#39;</span><span class="sc">{</span>base_ssh_command<span class="sc">}</span><span class="ss">&#39; ubuntu@</span><span class="sc">{</span>public_ip<span class="sc">}</span><span class="ss">:</span><span class="sc">{</span>remote_path<span class="sc">}</span><span class="ss"> </span><span class="sc">{</span>local_path<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb1-202"><a href="#cb1-202" aria-hidden="true" tabindex="-1"></a>    subprocess.check_call(rsync_command, shell<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb1-203"><a href="#cb1-203" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-204"><a href="#cb1-204" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-205"><a href="#cb1-205" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> load_build_bot_from_cache(cache_directory):</span>
<span id="cb1-206"><a href="#cb1-206" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> json.load(<span class="bu">open</span>(cache_directory <span class="op">+</span> <span class="st">&quot;/build_bot.json&quot;</span>, <span class="st">&quot;r&quot;</span>))</span>
<span id="cb1-207"><a href="#cb1-207" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-208"><a href="#cb1-208" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-209"><a href="#cb1-209" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> store_build_bot_cache(cache_directory, build_bot):</span>
<span id="cb1-210"><a href="#cb1-210" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb1-211"><a href="#cb1-211" aria-hidden="true" tabindex="-1"></a>        os.makedirs(cache_directory)</span>
<span id="cb1-212"><a href="#cb1-212" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">OSError</span> <span class="im">as</span> e:</span>
<span id="cb1-213"><a href="#cb1-213" aria-hidden="true" tabindex="-1"></a>        <span class="im">from</span> errno <span class="im">import</span> EEXIST</span>
<span id="cb1-214"><a href="#cb1-214" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-215"><a href="#cb1-215" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> e.errno <span class="op">!=</span> EEXIST:</span>
<span id="cb1-216"><a href="#cb1-216" aria-hidden="true" tabindex="-1"></a>            <span class="cf">raise</span></span>
<span id="cb1-217"><a href="#cb1-217" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> json.dump(build_bot, <span class="bu">open</span>(cache_directory <span class="op">+</span> <span class="st">&quot;/build_bot.json&quot;</span>, <span class="st">&quot;w&quot;</span>))</span>
<span id="cb1-218"><a href="#cb1-218" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-219"><a href="#cb1-219" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-220"><a href="#cb1-220" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> is_build_bot_alive(public_ip):</span>
<span id="cb1-221"><a href="#cb1-221" aria-hidden="true" tabindex="-1"></a>    shutdown_command <span class="op">=</span> reschedule_shutdown_command(<span class="dv">10</span>)</span>
<span id="cb1-222"><a href="#cb1-222" aria-hidden="true" tabindex="-1"></a>    ssh_command <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>base_ssh_command<span class="sc">}</span><span class="ss"> -o ConnectTimeout=3 ubuntu@</span><span class="sc">{</span>public_ip<span class="sc">}</span><span class="ss"> </span><span class="sc">{</span>quote(shutdown_command)<span class="sc">}</span><span class="ss"> &gt;/dev/null 2&gt;/dev/null&quot;</span></span>
<span id="cb1-223"><a href="#cb1-223" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb1-224"><a href="#cb1-224" aria-hidden="true" tabindex="-1"></a>        subprocess.check_call(ssh_command, shell<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb1-225"><a href="#cb1-225" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">True</span></span>
<span id="cb1-226"><a href="#cb1-226" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> subprocess.CalledProcessError:</span>
<span id="cb1-227"><a href="#cb1-227" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span></span>
<span id="cb1-228"><a href="#cb1-228" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-229"><a href="#cb1-229" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-230"><a href="#cb1-230" aria-hidden="true" tabindex="-1"></a><span class="at">@timing</span></span>
<span id="cb1-231"><a href="#cb1-231" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> invalidate_build_bot_cache(cache_directory):</span>
<span id="cb1-232"><a href="#cb1-232" aria-hidden="true" tabindex="-1"></a>    <span class="im">from</span> shutil <span class="im">import</span> rmtree</span>
<span id="cb1-233"><a href="#cb1-233" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-234"><a href="#cb1-234" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="st">&quot;/build-bot/&quot;</span> <span class="kw">not</span> <span class="kw">in</span> cache_directory:</span>
<span id="cb1-235"><a href="#cb1-235" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&quot;failing because cache directory looks wrong&quot;</span>)</span>
<span id="cb1-236"><a href="#cb1-236" aria-hidden="true" tabindex="-1"></a>    rmtree(cache_directory)</span>
<span id="cb1-237"><a href="#cb1-237" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-238"><a href="#cb1-238" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-239"><a href="#cb1-239" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> reschedule_shutdown_command(minutes):</span>
<span id="cb1-240"><a href="#cb1-240" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Only cancel existing shutdown jobs after we&#39;ve scheduled a new</span></span>
<span id="cb1-241"><a href="#cb1-241" aria-hidden="true" tabindex="-1"></a>    <span class="co"># shutdown, so that there&#39;s always a shutdown scheduled even in the</span></span>
<span id="cb1-242"><a href="#cb1-242" aria-hidden="true" tabindex="-1"></a>    <span class="co"># face of incoming interrupts.</span></span>
<span id="cb1-243"><a href="#cb1-243" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="ss">f&#39;sudo bash -c &quot;to_cancel=$(atq | cut -f 1); echo shutdown -h | at now + </span><span class="sc">{</span>minutes<span class="sc">}</span><span class="ss"> min; echo &quot;$to_cancel&quot; | xargs atrm; exit 0&quot; &gt;/dev/null 2&gt;/dev/null&#39;</span></span>
<span id="cb1-244"><a href="#cb1-244" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-245"><a href="#cb1-245" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-246"><a href="#cb1-246" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb1-247"><a href="#cb1-247" aria-hidden="true" tabindex="-1"></a>    build_bot <span class="op">=</span> <span class="va">None</span></span>
<span id="cb1-248"><a href="#cb1-248" aria-hidden="true" tabindex="-1"></a>    key_file_path <span class="op">=</span> <span class="st">&quot;~/.ssh/build-bot.pem&quot;</span></span>
<span id="cb1-249"><a href="#cb1-249" aria-hidden="true" tabindex="-1"></a>    base_ssh_command <span class="op">=</span> <span class="ss">f&quot;ssh -i </span><span class="sc">{</span>key_file_path<span class="sc">}</span><span class="ss"> -o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPath=/tmp/%C -o ControlPersist=10m&quot;</span></span>
<span id="cb1-250"><a href="#cb1-250" aria-hidden="true" tabindex="-1"></a>    instance_name <span class="op">=</span> <span class="st">&quot;build-bot&quot;</span></span>
<span id="cb1-251"><a href="#cb1-251" aria-hidden="true" tabindex="-1"></a>    instance_type <span class="op">=</span> <span class="st">&quot;c7a.8xlarge&quot;</span></span>
<span id="cb1-252"><a href="#cb1-252" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-253"><a href="#cb1-253" aria-hidden="true" tabindex="-1"></a>    cache_directory <span class="op">=</span> os.path.expanduser(<span class="st">&quot;~/.cache/build-bot/&quot;</span>)</span>
<span id="cb1-254"><a href="#cb1-254" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> os.path.isdir(cache_directory):</span>
<span id="cb1-255"><a href="#cb1-255" aria-hidden="true" tabindex="-1"></a>        build_bot <span class="op">=</span> load_build_bot_from_cache(cache_directory)</span>
<span id="cb1-256"><a href="#cb1-256" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> retries <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">60</span>):</span>
<span id="cb1-257"><a href="#cb1-257" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> is_build_bot_alive(build_bot[<span class="st">&quot;public_ip&quot;</span>]):</span>
<span id="cb1-258"><a href="#cb1-258" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span>
<span id="cb1-259"><a href="#cb1-259" aria-hidden="true" tabindex="-1"></a>            sleep(<span class="dv">1</span>)</span>
<span id="cb1-260"><a href="#cb1-260" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> get_instance_information(instance_name) <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb1-261"><a href="#cb1-261" aria-hidden="true" tabindex="-1"></a>                <span class="co"># The build bot went away (as expected).</span></span>
<span id="cb1-262"><a href="#cb1-262" aria-hidden="true" tabindex="-1"></a>                invalidate_build_bot_cache(cache_directory)</span>
<span id="cb1-263"><a href="#cb1-263" aria-hidden="true" tabindex="-1"></a>                build_bot <span class="op">=</span> <span class="va">None</span></span>
<span id="cb1-264"><a href="#cb1-264" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span>
<span id="cb1-265"><a href="#cb1-265" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb1-266"><a href="#cb1-266" aria-hidden="true" tabindex="-1"></a>            <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&quot;build bot is present but not responsive&quot;</span>)</span>
<span id="cb1-267"><a href="#cb1-267" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-268"><a href="#cb1-268" aria-hidden="true" tabindex="-1"></a>    user_command <span class="op">=</span> <span class="st">&quot; &quot;</span>.join(sys.argv[<span class="dv">1</span>:])</span>
<span id="cb1-269"><a href="#cb1-269" aria-hidden="true" tabindex="-1"></a>    local_out_directory <span class="op">=</span> <span class="st">&quot;~/v8/v8/out/x64.release&quot;</span></span>
<span id="cb1-270"><a href="#cb1-270" aria-hidden="true" tabindex="-1"></a>    commands_to_run <span class="op">=</span> [<span class="ss">f&quot;cd </span><span class="sc">{</span>fp<span class="sc">}</span><span class="ss">&quot;</span>, <span class="st">&quot;export PATH=/b/depot_tools:$PATH&quot;</span>]</span>
<span id="cb1-271"><a href="#cb1-271" aria-hidden="true" tabindex="-1"></a>    os.environ[<span class="st">&quot;GIT_SSH_COMMAND&quot;</span>] <span class="op">=</span> base_ssh_command</span>
<span id="cb1-272"><a href="#cb1-272" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-273"><a href="#cb1-273" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> build_bot <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb1-274"><a href="#cb1-274" aria-hidden="true" tabindex="-1"></a>        build_bot <span class="op">=</span> get_instance_information(instance_name)</span>
<span id="cb1-275"><a href="#cb1-275" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-276"><a href="#cb1-276" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> build_bot <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb1-277"><a href="#cb1-277" aria-hidden="true" tabindex="-1"></a>        spot_request_id <span class="op">=</span> request_spot_instance(instance_name, instance_type)</span>
<span id="cb1-278"><a href="#cb1-278" aria-hidden="true" tabindex="-1"></a>        instance_id <span class="op">=</span> wait_for_spot_instance_request(spot_request_id)</span>
<span id="cb1-279"><a href="#cb1-279" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> retries <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">60</span>):</span>
<span id="cb1-280"><a href="#cb1-280" aria-hidden="true" tabindex="-1"></a>            <span class="cf">try</span>:</span>
<span id="cb1-281"><a href="#cb1-281" aria-hidden="true" tabindex="-1"></a>                sleep(<span class="dv">1</span>)</span>
<span id="cb1-282"><a href="#cb1-282" aria-hidden="true" tabindex="-1"></a>                build_bot <span class="op">=</span> get_instance_information(instance_name)</span>
<span id="cb1-283"><a href="#cb1-283" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> build_bot <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb1-284"><a href="#cb1-284" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span></span>
<span id="cb1-285"><a href="#cb1-285" aria-hidden="true" tabindex="-1"></a>            <span class="cf">except</span> <span class="pp">KeyError</span>:  <span class="co"># network not ready yet...</span></span>
<span id="cb1-286"><a href="#cb1-286" aria-hidden="true" tabindex="-1"></a>                <span class="cf">pass</span></span>
<span id="cb1-287"><a href="#cb1-287" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb1-288"><a href="#cb1-288" aria-hidden="true" tabindex="-1"></a>            <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&quot;spot instance request fulfilled but no bot&quot;</span>)</span>
<span id="cb1-289"><a href="#cb1-289" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-290"><a href="#cb1-290" aria-hidden="true" tabindex="-1"></a>    public_ip <span class="op">=</span> build_bot[<span class="st">&quot;public_ip&quot;</span>]</span>
<span id="cb1-291"><a href="#cb1-291" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> build_bot[<span class="st">&quot;has_volume&quot;</span>]:</span>
<span id="cb1-292"><a href="#cb1-292" aria-hidden="true" tabindex="-1"></a>        instance_id <span class="op">=</span> build_bot[<span class="st">&quot;instance_id&quot;</span>]</span>
<span id="cb1-293"><a href="#cb1-293" aria-hidden="true" tabindex="-1"></a>        attach_volume(instance_id)</span>
<span id="cb1-294"><a href="#cb1-294" aria-hidden="true" tabindex="-1"></a>        build_bot[<span class="st">&quot;has_volume&quot;</span>] <span class="op">=</span> <span class="va">True</span></span>
<span id="cb1-295"><a href="#cb1-295" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-296"><a href="#cb1-296" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> build_bot.get(<span class="st">&quot;has_mount&quot;</span>):</span>
<span id="cb1-297"><a href="#cb1-297" aria-hidden="true" tabindex="-1"></a>        mount_when_ready(public_ip, key_file_path)</span>
<span id="cb1-298"><a href="#cb1-298" aria-hidden="true" tabindex="-1"></a>        build_bot[<span class="st">&quot;has_mount&quot;</span>] <span class="op">=</span> <span class="va">True</span></span>
<span id="cb1-299"><a href="#cb1-299" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-300"><a href="#cb1-300" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="st">&quot;gm.py&quot;</span> <span class="kw">in</span> user_command:</span>
<span id="cb1-301"><a href="#cb1-301" aria-hidden="true" tabindex="-1"></a>        git_sha <span class="op">=</span> sync_changes_to_git()</span>
<span id="cb1-302"><a href="#cb1-302" aria-hidden="true" tabindex="-1"></a>        push_git_sha(public_ip, key_file_path, git_sha)</span>
<span id="cb1-303"><a href="#cb1-303" aria-hidden="true" tabindex="-1"></a>        commands_to_run.append(<span class="ss">f&quot;git checkout </span><span class="sc">{</span>git_sha<span class="sc">}</span><span class="ss"> &gt;/dev/null&quot;</span>)</span>
<span id="cb1-304"><a href="#cb1-304" aria-hidden="true" tabindex="-1"></a>    commands_to_run.append(user_command)</span>
<span id="cb1-305"><a href="#cb1-305" aria-hidden="true" tabindex="-1"></a>    commands_to_run.append(reschedule_shutdown_command(<span class="dv">3</span>))</span>
<span id="cb1-306"><a href="#cb1-306" aria-hidden="true" tabindex="-1"></a>    run_command(public_ip, key_file_path, <span class="st">&quot;;&quot;</span>.join(commands_to_run))</span>
<span id="cb1-307"><a href="#cb1-307" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-308"><a href="#cb1-308" aria-hidden="true" tabindex="-1"></a>    store_build_bot_cache(cache_directory, build_bot)</span>
<span id="cb1-309"><a href="#cb1-309" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-310"><a href="#cb1-310" aria-hidden="true" tabindex="-1"></a>    <span class="co"># add as necessary</span></span>
<span id="cb1-311"><a href="#cb1-311" aria-hidden="true" tabindex="-1"></a>    <span class="co"># rsync_from_remote(public_ip, key_file_path, f&quot;{fp}/out/x64.release/&quot;, local_out_directory)</span></span></code></pre></div>
</details>
<details>
<summary>
Packer Code
</summary>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">packer</span> {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">required_plugins</span> {</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="ex">amazon</span> = {</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>      <span class="ex">version</span> = <span class="st">&quot;&gt;= 0.0.1&quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      <span class="bu">source</span>  = <span class="st">&quot;github.com/hashicorp/amazon&quot;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="er">}</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="er">}</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="er">}</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="bu">source</span> <span class="st">&quot;amazon-ebs&quot;</span> <span class="st">&quot;ubuntu&quot;</span> {</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">ami_name</span>      = <span class="st">&quot;build-bot-ami&quot;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">instance_type</span> = <span class="st">&quot;c7a.xlarge&quot;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="ex">region</span>        = <span class="st">&quot;us-west-2&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">source_ami_filter</span> {</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="ex">filters</span> = {</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>      <span class="ex">name</span>                = <span class="st">&quot;ubuntu/images/*ubuntu-focal-20.04-amd64-server-*&quot;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>      <span class="ex">root-device-type</span>    = <span class="st">&quot;ebs&quot;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>      <span class="ex">virtualization-type</span> = <span class="st">&quot;hvm&quot;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>    <span class="er">}</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    <span class="ex">most_recent</span> = true</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    <span class="ex">owners</span>      = <span class="pp">[</span><span class="st">&quot;099720109477&quot;</span><span class="pp">]</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>  <span class="er">}</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>  <span class="ex">ssh_username</span> = <span class="st">&quot;ubuntu&quot;</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="er">}</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="ex">build</span> {</span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>  <span class="ex">name</span>    = <span class="st">&quot;build-bot&quot;</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>  <span class="ex">sources</span> = [</span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;source.amazon-ebs.ubuntu&quot;</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>  <span class="ex">]</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>  <span class="ex">provisioner</span> <span class="st">&quot;file&quot;</span> {</span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>    <span class="bu">source</span> = <span class="st">&quot;../build-bot.pub&quot;</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>    <span class="ex">destination</span> = <span class="st">&quot;/tmp/build-bot.pub&quot;</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>  <span class="er">}</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>  <span class="ex">provisioner</span> <span class="st">&quot;shell&quot;</span> {</span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>    <span class="ex">script</span> = <span class="st">&quot;setup.sh&quot;</span></span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>  <span class="er">}</span></span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a><span class="er">}</span></span></code></pre></div>
</details>
<details>
<summary>
<code>setup.sh</code> Shell Code (used by Packer)
</summary>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/bin/bash</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-Eeuox</span> pipefail</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co"># Update &amp; upgrade all packages.</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">DEBIAN_FRONTEND</span><span class="op">=</span>noninteractive</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> apt-get update <span class="at">-y</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> apt-get <span class="at">-y</span> <span class="at">-o</span> Dpkg::Options::=<span class="st">&quot;--force-confdef&quot;</span> <span class="dt">\</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="at">-o</span> Dpkg::Options::=<span class="st">&quot;--force-confold&quot;</span> dist-upgrade</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> apt-get update</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Install the SSH key.</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> <span class="at">-p</span> ~/.ssh</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="fu">chmod</span> 700 ~/.ssh</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="fu">cp</span> /tmp/build-bot.pub ~/.ssh/authorized_keys</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="fu">chmod</span> 600 ~/.ssh/authorized_keys</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="co"># Some dependencies I use.</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> apt-get <span class="at">-y</span> <span class="at">-qq</span> install ninja-build ccache</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="co"># Dependencies for V8/Chromium.</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="ex">curl</span> https://chromium.googlesource.com/chromium/src/+/main/build/install-build-deps.py<span class="pp">?</span>format=TEXT <span class="dt">\</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">|</span> <span class="fu">base64</span> <span class="at">-d</span> <span class="op">&gt;</span> /tmp/install_build_deps.py</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> python3 /tmp/install_build_deps.py</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="co"># By default you can&#39;t log in while the machine is booting or</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="co"># shutting down. Comment that out - lets us SSH in faster.</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> sed <span class="at">-i</span> <span class="st">&#39;/account[[:space:]]*required[[:space:]]*pam_nologin.so/s/^/#/&#39;</span> /etc/pam.d/sshd</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="co"># Add the mountpoint.</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> mkdir <span class="at">-p</span> /b</span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> chown ubuntu:ubuntu /b</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="co"># Add some configuration files outside of the root mount.</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> <span class="at">-p</span> ~/.ccache</span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="fu">cat</span> <span class="op">&gt;</span> ~/.ccache/ccache.conf <span class="op">&lt;&lt;EOF</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="st">max_size = 32.0G</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a><span class="st">cache_dir = /b/ccache</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a><span class="op">EOF</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> . /b/.bashrc <span class="op">&gt;&gt;</span> ~/.bashrc</span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> source /b/.vimrc <span class="op">&gt;&gt;</span> ~/.vimrc</span></code></pre></div>
</details>
<p>P.S. After doing all this, I’m thinking I’ll just buy a new computer.</p>
    </section>
    <section class="header">
        
        Posted on 2023-11-26
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>A New Configuration File Format: JSONTOMLYAML</title>
    <link href="https://kvakil.me/posts/2023-09-13-new-file-format-jsonyamltoml.html" />
    <id>https://kvakil.me/posts/2023-09-13-new-file-format-jsonyamltoml.html</id>
    <published>2023-09-13T00:00:00Z</published>
    <updated>2023-09-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>A New Configuration File Format: JSONTOMLYAML</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;meta&#39;." href="/tags/meta.html" rel="tag">meta</a></p>
        <p>JSONTOMLYAML (JavaScript Object Notation Tom’s Obvious, Minimal Language Yet
Another Markup Language) is a new configuration file format. A file is a valid
JSONTOMLYAML file iff it is a valid JSON file, a valid TOML file, and a valid
YAML file. You get the readability of JSON, the flexibility of TOML, and the
simplicity of YAML, all in one format!</p>
<p>Files containing JSONTOMLYAML should be stored with the file extension
<code>.jsontomlyaml</code> and with MIME type <code>application/json+toml+yaml</code>. Try out
JSONTOMLYAML below!</p>
<style>
  #container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 10px;
  }

  #jsontomlyaml {
    grid-column: span 3;
  }

  textarea {
    width: 100%;
    font-size: 16px;
  }

  .col {
    display: flex;
    flex-direction: column;
  }
  .col > label { text-align: center; }
</style>
<div id="container">
<textarea id="jsontomlyaml" placeholder="Enter your JSONTOMLYAML here..." rows="7" oninput="jsontomlyaml_changed()"></textarea>
<br><label style="display: inline-block" for="example">Or, choose an example:</label> <select id="example" style="display: inline-block" onchange="example_change()"><option value="">Select an example…</option><option value="cn1">Church numeral 1</option><option value="cn2">Church numeral 2</option><option value="fp">Floating point</option></select>
<div class="col">
<textarea id="json" readonly rows="7"></textarea>
<label for=json>JSON output</label>
</div>
<div class="col">
<textarea id="toml" readonly rows="7"></textarea>
<label for=toml>TOML output</label>
</div>
<div class="col">
<textarea id="yaml" readonly rows="7"></textarea>
<label for=yaml>YAML output</label>
</div>
</div>
<script src="/assets/jsontomlyaml/js-yaml.min.js" type="text/javascript" />
<script src="/assets/jsontomlyaml/toml.js" type="text/javascript" />
<script type="text/javascript">
function tryparse(el, f, s) {
        try {
                el.value = JSON.stringify(f(s), null, 2);
                el.style.color = '#000';
        } catch (err) {
                el.value = err.toString();
                el.style.color = '#f00';
        }
}
function jsontomlyaml_changed() {
        const jtl = window.jsontomlyaml.value;
        tryparse(window.json, JSON.parse, jtl);
        tryparse(window.toml, TOMLParse, jtl);
        tryparse(window.yaml, jsyaml.load, jtl);
}

function example_change() {
        switch (window.example.value) {
                case 'cn1': window.jsontomlyaml.value = '["0"]'; break;
                case 'cn2': window.jsontomlyaml.value = '[["0"]]'; break;
                case 'fp': window.jsontomlyaml.value = '[0.314159e1]'; break;
                case '': window.jsontomlyaml.value = ''; break;
        }
        jsontomlyaml_changed();
}
</script>
<p>(Note that it is implementation-defined which of the three parse results are
used. Implementations MUST validate that their inputs are valid JSONTOMLYAML,
otherwise all the benefits are lost!)</p>
    </section>
    <section class="header">
        
        Posted on 2023-09-13
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>My Tree Style Tab Configuration</title>
    <link href="https://kvakil.me/posts/2023-09-12-my-tree-style-tab-configuration.html" />
    <id>https://kvakil.me/posts/2023-09-12-my-tree-style-tab-configuration.html</id>
    <published>2023-09-12T00:00:00Z</published>
    <updated>2023-09-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>My Tree Style Tab Configuration</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;meta&#39;." href="/tags/meta.html" rel="tag">meta</a></p>
        <p>I use <a href="https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/">Tree Style Tab</a> on Firefox. People comment on how my browser
looks a lot so here’s how I customize it to look good.</p>
<figure>
<img src="/assets/tst_customized.jpg" alt="Customized look" />
<figcaption aria-hidden="true">Customized look</figcaption>
</figure>
<figure>
<img src="/assets/tst_default.jpg" alt="Default look" />
<figcaption aria-hidden="true">Default look</figcaption>
</figure>
<p>Mostly I’ve just hidden things:</p>
<ul>
<li>The title bar takes up vertical space, so I disable it.
<ul>
<li>This requires using “Customize toolbar…” in Firefox and then
unchecking “Title Bar”.</li>
<li>On xfce, this causes the windows controls to overlap with the
back/forward/refresh buttons. It doesn’t look good, but whatever.</li>
</ul></li>
<li>Hide the regular tab toolbar, which is redundant with Tree Style Tab.</li>
<li>Remove some noise from the side toolbar. This also makes it hard to
switch to alternate sidebars, but I don’t do that.</li>
</ul>
<p>Here is the userChrome CSS I use. (See
<a href="https://www.userchrome.org/">userchrome.org</a> for instructions about how
to add it to your Firefox.)</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="er">// Hide the title bar.</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#titlebar</span> {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">appearance</span>: <span class="dv">none</span> <span class="at">!important</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">height</span>: <span class="dv">0</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#titlebar</span> <span class="op">&gt;</span> <span class="pp">#toolbar-menubar</span> {</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">margin-top</span>: <span class="dv">0</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="er">// Hide regular tab toolbar.</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#main-window</span><span class="ex">[tabsintitlebar</span><span class="op">=</span><span class="st">&quot;true&quot;</span><span class="ex">]</span><span class="in">:not(</span><span class="ex">[extradragspace</span><span class="op">=</span><span class="st">&quot;true&quot;</span><span class="ex">]</span><span class="in">)</span> <span class="pp">#TabsToolbar</span> <span class="op">&gt;</span> <span class="fu">.toolbar-items</span> {</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">pointer-events</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="pp">#main-window</span><span class="in">:not(</span><span class="ex">[tabsintitlebar</span><span class="op">=</span><span class="st">&quot;true&quot;</span><span class="ex">]</span><span class="in">)</span> <span class="pp">#TabsToolbar</span> {</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">visibility</span>: <span class="dv">collapse</span> <span class="at">!important</span><span class="op">;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="er">// Hide the side toolbar noise.</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="pp">#TabsToolbar</span> {</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>  <span class="kw">min-width</span>: <span class="dv">0</span> <span class="at">!important</span><span class="op">;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="kw">min-height</span>: <span class="dv">0</span> <span class="at">!important</span><span class="op">;</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="pp">#TabsToolbar</span> <span class="op">&gt;</span> <span class="fu">.titlebar-buttonbox-container</span> {</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>  <span class="kw">display</span>: <span class="dv">block</span><span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  <span class="kw">position</span>: <span class="dv">absolute</span><span class="op">;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  <span class="kw">top</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">left</span>: <span class="dv">0</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="pp">#sidebar-box</span><span class="ex">[sidebarcommand</span><span class="op">=</span><span class="st">&quot;treestyletab_piro_sakura_ne_jp-sidebar-action&quot;</span><span class="ex">]</span> <span class="pp">#sidebar-header</span> {</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>  <span class="kw">display</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>I also use <a href="https://addons.mozilla.org/en-GB/firefox/addon/vimium-ff/">Vimium</a>. A neat trick if you use both is that <code>t</code> with
Vimium will open a new child tab, whereas <code>Ctrl+T</code> will a new root tab.
This saves me some time reparenting tabs.</p>
<p>If you want to make your own changes to the CSS, you can use <a href="https://firefox-source-docs.mozilla.org/devtools-user/browser_toolbox/index.html">Firefox’s
Browser Toolbox</a> in order to write your styling.</p>
    </section>
    <section class="header">
        
        Posted on 2023-09-12
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Node.js Startup: comparing to Deno &amp; Bun</title>
    <link href="https://kvakil.me/posts/2023-05-23-nodejs-startup-series-comparing-to-deno-and-bun.html" />
    <id>https://kvakil.me/posts/2023-05-23-nodejs-startup-series-comparing-to-deno-and-bun.html</id>
    <published>2023-05-23T00:00:00Z</published>
    <updated>2023-05-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Node.js Startup: comparing to Deno &amp; Bun</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;nodejs-startup&#39;." href="/tags/nodejs-startup.html" rel="tag">nodejs-startup</a></p>
        <p>A blog reader suggested that we also benchmark startup for two up-and-coming
Javascript runtimes: <a href="https://deno.com/">Deno</a> &amp; <a href="https://bun.sh/">Bun</a>. Both
of these runtimes are less mature than Node.js, and startup time is a very
narrow benchmark, so please don’t interpret anything here as being some sort of
general statement.</p>
<p>Because these runtimes are evolving so fast, here’s the versions I’m
using for testing:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ~/.deno/bin/deno <span class="at">--version</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">deno</span> 1.33.2 <span class="er">(</span><span class="ex">release,</span> x86_64-unknown-linux-gnu<span class="kw">)</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">v8</span> 11.4.183.1</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">typescript</span> 5.0.3</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ~/.bun/bin/bun <span class="at">--version</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">0.5.9</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> node <span class="at">--version</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ex">v21.0.0-pre</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co"># (4040a904dedfae8e1a60cc29ed78aab7945d272f)</span></span></code></pre></div>
<p>Now we can collect the startup time &amp; memory usage <a href="/posts/2023-05-09-nodejs-startup-series-intro-and-measuring-startup-time.html">using the same methodology
as in the intro</a>.</p>
<p>Bun’s startup is significantly (3x) faster than both Deno’s and Node’s.
Applying all of my improvements to Node closes the gap to ~2x:</p>
<script type="text/javascript" src="/assets/vega@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-lite@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-embed@6.js" defer></script>
<script type="text/javascript" src="/assets/nodejs-startup-intro-vl.js" defer></script>
<center>
<div id="vis-runtime" style="width: 650px;max-width:100%" data-filename="/assets/nodejs-startup-bun-deno-timings.json" data-title="Runtime comparison" data-facet="Runtime">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
Memory usage is a little more competitive. Bun and Deno both use a fair
bit more memory, Node.js uses much less once my patches are applied:
<center>
<div id="vis-memory" style="width: 650px;max-width:100%" data-filename="/assets/nodejs-startup-bun-deno-memory.json" data-title="Unique set size comparison" data-facet="Runtime">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
<p>It’ll be interesting to see how these two runtimes evolve: it’s possible
they’ll end up slower than Node as they add more features, or maybe
Bun’s JSC core is just intrinsically better suited for fast startup than
Node/Deno’s V8.</p>
    </section>
    <section class="header">
        
        Posted on 2023-05-23
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Node.js Startup: Removing code cache copies</title>
    <link href="https://kvakil.me/posts/2023-05-22-nodejs-startup-series-removing-code-cache-copies.html" />
    <id>https://kvakil.me/posts/2023-05-22-nodejs-startup-series-removing-code-cache-copies.html</id>
    <published>2023-05-22T00:00:00Z</published>
    <updated>2023-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Node.js Startup: Removing code cache copies</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;nodejs-startup&#39;." href="/tags/nodejs-startup.html" rel="tag">nodejs-startup</a>, <a title="All pages tagged &#39;low-level&#39;." href="/tags/low-level.html" rel="tag">low-level</a></p>
        In <a href="/posts/2023-05-10-nodejs-startup-series-profiling.html">an earlier
post</a> of <a href="/tags/nodejs-startup.html">this
series</a>, we successfully captured a profile of Node.js’s
startup. I noticed from the CPU profiles that there was a lot of memory
copying:
<center>
<object type="image/svg+xml" data="/assets/nodejs-startup-flamegraph.svg?s=null&amp;x=859.0&amp;y=100" style="max-width: 100%">
</object>
</center>
<p>Finding the sources of these copies was pretty easy: I set a breakpoint
on <code>memmove</code>, looked at the backtrace to try to figure out why the copy
was occurring, and did some refactoring to remove it. A lot of the
memory copies came from unnecessary copies of the “code cache”.
Javascript typically gets compiled into <a href="https://en.wikipedia.org/wiki/Bytecode">bytecode</a> before execution.
Node.js also stores the compiled bytecode for all of its builtin
modules. (For those familiar with Python, this is like a version of
<code>__pycache__</code> only for builtin modules.)</p>
<p>One interesting (&amp; in retrospect, obvious) source of copies was code like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">uint8_t</span> data<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">};</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="bu">std::</span>vector<span class="op">&lt;</span><span class="dt">uint8_t</span><span class="op">&gt;</span> data_vec<span class="op">{</span>data<span class="op">,</span> data <span class="op">+</span> <span class="kw">sizeof</span><span class="op">(</span>data<span class="op">)};</span></span></code></pre></div>
<p>Creating <code>data_vec</code> requires copying <code>data</code> onto the heap. This was pretty easy
to fix by just changing the users to deal with <code>const uint8_t*</code> instead.</p>
<p>While fixing this issue, I noticed something strange about the bytecode cache.
Here is a pseudo-code implementation of the bytecode cache:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>compileModule<span class="op">(</span>string id<span class="op">,</span> string function<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    cached_bytecode <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>cache<span class="op">.</span>has<span class="op">(</span>id<span class="op">))</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        cached_bytecode <span class="op">=</span> cache<span class="op">.</span>remove<span class="op">(</span>id<span class="op">);</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    compiled_function <span class="op">=</span> Compile<span class="op">(</span>function<span class="op">,</span> cached_bytecode<span class="op">);</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// (Compile consumes cached_bytecode,</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">//  it can no longer be used.)</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    cache<span class="op">.</span>add<span class="op">(</span>id<span class="op">,</span> compiled_function<span class="op">.</span>get_bytecode<span class="op">());</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Unfortunately re-populating the cache with <code>compiled_function.get_bytecode()</code> was
not cheap! In fact, the bytecode cache was <em>slowing down</em> the
compilation time rather than speeding it up: it would have been cheaper
(from a startup perspective) to just not have the cache at all.</p>
<p>The solution is pretty simple: we leave the bytecode in the cache instead of
removing it. This requires changing some code so that <code>cached_bytecode</code> can be
reused multiple times, but <a href="https://github.com/nodejs/node/pull/47958">that was pretty tractable</a>. In addition
to speeding up the “empty” startup, this made the average Node.js builtin
module around 20% faster to require, which should speedup startup even more for
real-world use-cases.</p>
<p>Combining this optimization with another one <a href="https://github.com/nodejs/node/pull/47144/">which removes another unnecessary
copy</a>, we get a nice 12%
improvement in startup time:</p>
<script type="text/javascript" src="/assets/vega@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-lite@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-embed@6.js" defer></script>
<script type="text/javascript" src="/assets/nodejs-startup-intro-vl.js" defer></script>
<center>
<div id="vis-runtime" style="width: 650px;max-width:100%" data-filename="/assets/nodejs-startup-pt2-timings.json" data-title="Runtime of main before &amp; after change">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
<p>and by removing the extra copies floating around in memory, we also get a solid
decrease in unique set size:</p>
<center>
<div id="vis-memory" style="width: 650px;max-width:100%" data-filename="/assets/nodejs-startup-pt2-memory.json" data-title="Unique set size before &amp; after change">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
    </section>
    <section class="header">
        
        Posted on 2023-05-22
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Node.js Startup: Speeding up Snapshot Deserialization</title>
    <link href="https://kvakil.me/posts/2023-05-11-nodejs-startup-series-externalizing-startup-strings.html" />
    <id>https://kvakil.me/posts/2023-05-11-nodejs-startup-series-externalizing-startup-strings.html</id>
    <published>2023-05-11T00:00:00Z</published>
    <updated>2023-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Node.js Startup: Speeding up Snapshot Deserialization</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;nodejs-startup&#39;." href="/tags/nodejs-startup.html" rel="tag">nodejs-startup</a>, <a title="All pages tagged &#39;low-level&#39;." href="/tags/low-level.html" rel="tag">low-level</a></p>
        <p>In <a href="/posts/2023-05-10-nodejs-startup-series-profiling.html">the previous
post</a> of <a href="/tags/nodejs-startup.html">this
series</a>, we successfully captured a profile of Node.js’s
startup. Looking at the profile, we see that around 1/3rd of Node.js’s
startup time was in two functions: <code>v8::internal::Snapshot::Initialize</code>
and <code>v8::Context::FromSnapshot</code>. But what is a snapshot? A snapshot is
a serialized version of V8’s heap which can be deserialized later. This
allows embedders like Node.js to quickly load from a snapshot, rather
than redoing all their bootstrapping all the time. <a href="https://v8.dev/blog/custom-startup-snapshots">You can learn more
at V8’s blog.</a></p>
<p>I also profiled d8, V8’s minimal Javascript shell. It spent a similar 1/3rd of
its time deserializing from the snapshot, but d8 loads three times faster, so
the absolute snapshot deserialization time is 3x faster. My next question
was… what’s in Node.js’s snapshot and why is it so much slower?</p>
<p>There is a V8 flag we can give called <code>--profile-deserialization</code>, which
outputs some timings:<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>$ out<span class="op">/</span>Release<span class="op">/</span>d8 <span class="op">--</span>profile<span class="op">-</span>deserialization <span class="op">-</span>e <span class="dv">0</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Verifying snapshot checksum took <span class="dv">0</span><span class="er">.196</span> ms<span class="op">]</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing isolate <span class="op">(</span><span class="dv">201600</span> bytes<span class="op">)</span> took <span class="fl">1.917</span> ms<span class="op">]</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing context #<span class="dv">0</span> <span class="op">(</span><span class="dv">49616</span> bytes<span class="op">)</span> took <span class="dv">0</span><span class="er">.356</span> ms<span class="op">]</span></span></code></pre></div>
<p>whereas for Node.js:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>$ <span class="op">./</span>node_main <span class="op">--</span>profile<span class="op">-</span>deserialization <span class="op">-</span>e <span class="dv">0</span> <span class="op">|</span> head <span class="op">-</span>n3</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Verifying snapshot checksum took <span class="dv">0</span><span class="er">.827</span> ms<span class="op">]</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing isolate <span class="op">(</span><span class="dv">1449656</span> bytes<span class="op">)</span> took <span class="fl">5.886</span> ms<span class="op">]</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing context #<span class="dv">3</span> <span class="op">(</span><span class="dv">379640</span> bytes<span class="op">)</span> took <span class="fl">2.526</span> ms<span class="op">]</span></span></code></pre></div>
<p>Node.js’s serialized isolate and context are both around 7x the size of d8’s,
which probably explains why deserializing it is slower. An <em>isolate</em> is an
instance of the V8 engine (along with its heap) while a <em>context</em> is a global
object of an isolate (an isolate can actually have multiple contexts). Next up
I was curious what was actually in the heap. Continuing on the flag
exploration, <code>--serialization-statistics</code> can be used to dump statistics on
what object types are in the snapshot. I had to pass it to Node.js’s snapshot
creation script:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/tools/snapshot/node_mksnapshot.cc b/tools/snapshot/node_mksnapshot.cc</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>index d6d92ab156..226c1efa0e 100644</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/tools/snapshot/node_mksnapshot.cc</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/tools/snapshot/node_mksnapshot.cc</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -53,6 +53,7 @@ int main(int argc, char* argv[]) {</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>   v8::V8::SetFlagsFromString(&quot;--random_seed=42&quot;);</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>   v8::V8::SetFlagsFromString(&quot;--harmony-import-assertions&quot;);</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="va">+  v8::V8::SetFlagsFromString(&quot;--serialization-statistics&quot;);</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>   return BuildSnapshot(argc, argv);</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>Here is the output of that, slightly cleaned up &amp; truncated:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>StartupSerializer<span class="op">:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  Spaces <span class="op">(</span>bytes<span class="op">):</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a> read_only_space       new_space       old_space</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>               <span class="dv">0</span>         <span class="dv">1754464</span>          <span class="dv">192768</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>Instance types <span class="op">(</span>count and bytes<span class="op">):</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="dv">65</span>     <span class="dv">956216</span>  new_space  EXTERNAL_ONE_BYTE_STRING_TYPE</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>       <span class="dv">215</span>     <span class="dv">291768</span>  new_space  FIXED_ARRAY_TYPE</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      <span class="dv">1004</span>     <span class="dv">192768</span>  old_space  CODE_TYPE</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      <span class="dv">2492</span>     <span class="dv">139552</span>  new_space  SHARED_FUNCTION_INFO_TYPE</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      <span class="dv">1728</span>      <span class="dv">61776</span>  new_space  ONE_BYTE_STRING_TYPE</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>       <span class="dv">194</span>      <span class="dv">47904</span>  new_space  SCOPE_INFO_TYPE</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>       <span class="dv">355</span>      <span class="dv">42600</span>  new_space  FUNCTION_TEMPLATE_INFO_TYPE</span></code></pre></div>
<p>Certainly <code>EXTERNAL_ONE_BYTE_STRING_TYPE</code> looks suspicious. Why are we storing
1 MB of strings in the snapshot?</p>
<p>It turns out that this megabyte of external string data is Node.js’s Javascript
code. As an optimization, Node.js includes a copy of all of its Javascript code
inside its executable via a program called <a href="https://github.com/nodejs/node/blob/9398ff1dea564807378f485deae2eecaf5fde993/tools/js2c.py">js2c</a>. It then uses some
low-level V8 functionality called <a href="https://v8.github.io/api/head/classv8_1_1String_1_1ExternalStringResourceBase.html">external strings</a> to avoid copying the
Javascript code on to the Javascript heap. (When using external strings, V8
will store a pointer to the string data rather than copying the string data.)</p>
<p>However, when taking a snapshot, V8 will <a href="https://github.com/v8/v8/blob/d2c8fbe9ccd1a6ce5591bb7dd319c3c00d6bf489/src/snapshot/serializer.cc#L633">copy the external string data into
the snapshot</a>. This meant that the snapshot duplicated external string
content which was already in the executable. This both bloated the size of the
snapshot, and the size of the deserialized Javascript heap (since it contained
the actual Javascript code, rather than just a pointer to it if it used
external strings).</p>
<p>Fortunately V8 provides the necessary functionality to allow us to serialize
snapshots while allowing us to still supply “external” data to the snapshot.
V8 allows us to register “external references” in the snapshot. When
serializing the snapshot, we provide a list of external references. V8 will
replace each external reference with its index in that list. When deserializing
the snapshot, we provide the same list of external references, and V8 will
replace each index with the value in the list.</p>
<p>If we register the references to the external strings, V8 is smart enough to
avoid copying the external string data into the snapshot and use the external
reference functionality to properly revive the external strings during
deserialization. This means that we no longer need to store the string data
in the snapshot, cutting its size significantly:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>$ <span class="op">./</span>node_main <span class="op">--</span>profile<span class="op">-</span>deserialization <span class="op">-</span>e <span class="dv">0</span> <span class="op">|&amp;</span> head <span class="op">-</span>n3</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Verifying snapshot checksum took <span class="dv">0</span><span class="er">.827</span> ms<span class="op">]</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing isolate <span class="op">(</span><span class="dv">1449656</span> bytes<span class="op">)</span> took <span class="fl">5.886</span> ms<span class="op">]</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing context #<span class="dv">3</span> <span class="op">(</span><span class="dv">379640</span> bytes<span class="op">)</span> took <span class="fl">2.526</span> ms<span class="op">]</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>$ <span class="op">./</span>node <span class="op">--</span>profile<span class="op">-</span>deserialization <span class="op">-</span>e <span class="dv">0</span> <span class="op">|&amp;</span> head <span class="op">-</span>n3</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Verifying snapshot checksum took <span class="dv">0</span><span class="er">.443</span> ms<span class="op">]</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing isolate <span class="op">(</span><span class="dv">434168</span> bytes<span class="op">)</span> took <span class="fl">4.880</span> ms<span class="op">]</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Deserializing context #<span class="dv">3</span> <span class="op">(</span><span class="dv">379640</span> bytes<span class="op">)</span> took <span class="fl">2.651</span> ms<span class="op">]</span></span></code></pre></div>
<p><a href="https://github.com/nodejs/node/pull/47055">Doing this</a> speeds up startup by 1ms (4%), and also
saves 1.0 MiB of memory on each Node.js process:</p>
<script type="text/javascript" src="/assets/vega@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-lite@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-embed@6.js" defer></script>
<script type="text/javascript" src="/assets/nodejs-startup-intro-vl.js" defer></script>
<center>
<div id="vis-runtime" style="width: 650px;max-width:100%" data-filename="/assets/nodejs-startup-pt1-timings.json" data-title="Runtime of main before &amp; after change">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
<center>
<div id="vis-memory" style="width: 650px;max-width:100%" data-filename="/assets/nodejs-startup-pt1-memory.json" data-title="Unique set size before &amp; after change">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
<p>There’s probably more startup performance to squeeze out by cutting
unnecessary data from the snapshot. However there’s a tradeoff: you
could imagine eagerly adding commonly loaded modules to the snapshot,
which will improve the startup performance of real-world applications
which use the preloaded module at the cost of slowing down the minimal
startup. For now, we’ll take the free lunch win and move on from
focusing on snapshots for a little, while we continue <a href="/tags/nodejs-startup.html">the rest of the
series</a>.</p>
<aside id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>You can see a list of V8 flags by doing <code>node --v8-options</code>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
    </section>
    <section class="header">
        
        Posted on 2023-05-11
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Node.js Startup: Profiling Startup</title>
    <link href="https://kvakil.me/posts/2023-05-10-nodejs-startup-series-profiling.html" />
    <id>https://kvakil.me/posts/2023-05-10-nodejs-startup-series-profiling.html</id>
    <published>2023-05-10T00:00:00Z</published>
    <updated>2023-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Node.js Startup: Profiling Startup</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;nodejs-startup&#39;." href="/tags/nodejs-startup.html" rel="tag">nodejs-startup</a>, <a title="All pages tagged &#39;low-level&#39;." href="/tags/low-level.html" rel="tag">low-level</a></p>
        <p>In <a href="/posts/2023-05-09-nodejs-startup-series-intro-and-measuring-startup-time.html">the previous
post</a>
in <a href="/tags/nodejs-startup.html">this series</a>, we saw how to measure
Node.js’s startup time using hyperfine. hyperfine is great for
statistical analysis, but it doesn’t provide as much information as
<code>perf-stat(1)</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> perf stat <span class="at">--repeat</span><span class="op">=</span>1000 ./node <span class="at">-e</span> 0</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a> <span class="ex">Performance</span> counter stats for <span class="st">&#39;./node -e 0&#39;</span> <span class="er">(</span><span class="ex">1000</span> runs<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="ex">23.18</span> msec task-clock                <span class="co">#    0.996 CPUs utilized   (+- 0.20%)</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>       <span class="ex">19</span>      context-switches          <span class="co">#  818.731 /sec            (+- 1.23%)</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="ex">0</span>      cpu-migrations            <span class="co">#    0.000 /sec            </span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>     <span class="ex">3091</span>      page-faults               <span class="co">#  133.195 K/sec           (+- 0.01%)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a> <span class="ex">83289964</span>      cycles                    <span class="co">#    3.589 GHz             (+- 0.19%)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="ex">118025906</span>      instructions              <span class="co">#    1.41  insn per cycle  (+- 0.01%)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a> <span class="ex">19306506</span>      branches                  <span class="co">#  831.938 M/sec           (+- 0.02%)</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>   <span class="ex">448669</span>      branch-misses             <span class="co">#    2.33% of all branches (+- 0.06%)</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="ex">0.0232809</span> +- 0.0000467 seconds time elapsed  <span class="er">(</span> <span class="ex">+-</span>  0.20% <span class="kw">)</span></span></code></pre></div>
<p>Node.js is built on top of <a href="https://v8.dev/">Google’s V8 Javascript engine</a>, which has its
own barebones shell called “d8”. I wanted to see how fast d8 was. This would
provide a useful lower-bound: d8 does way less than Node.js, so it’s unlikely
we could beat it.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> perf stat <span class="at">-r</span> 1000 out/Release/d8 <span class="at">-e</span> 0</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a> <span class="ex">Performance</span> counter stats for <span class="st">&#39;out/Release/d8 -e 0&#39;</span> <span class="er">(</span><span class="ex">1000</span> runs<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="ex">7.84</span> msec task-clock                <span class="co">#    1.321 CPUs utilized   (+- 0.11%)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>       <span class="ex">33</span>      context-switches          <span class="co">#    4.506 K/sec           (+- 0.28%)</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="ex">0</span>      cpu-migrations            <span class="co">#    0.000 /sec            </span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>      <span class="ex">843</span>      page-faults               <span class="co">#  115.105 K/sec           (+- 0.02%)</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a> <span class="ex">24402305</span>      cycles                    <span class="co">#    3.332 GHz             (+- 0.10%)</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a> <span class="ex">26381058</span>      instructions              <span class="co">#    1.16  insn per cycle  (+- 0.01%)</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">4358727</span>      branches                  <span class="co">#  595.150 M/sec           (+- 0.01%)</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="ex">77103</span>      branch-misses             <span class="co">#    1.78% of all branches (+- 0.06%)</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="ex">0.00593508</span> +- 0.00000559 seconds time elapsed  <span class="er">(</span> <span class="ex">+-</span>  0.09% <span class="kw">)</span></span></code></pre></div>
<p>The salient points for me here were:</p>
<ol type="1">
<li>Node.js’s startup time is pretty small at 23ms elapsed time. We’ll need to
be working on shaving off milliseconds/microseconds in order to get faster.
It also seems unlikely that we’ll get more than 66% faster, based on the d8
lower bound.</li>
<li>The CPU is almost entirely utilized. Node.js’s startup is almost entirely
single-threaded, so “0.996 CPUs utilized” indicates that most of the
bottleneck is in CPU speed.</li>
<li>133000 page faults per second is a lot of page faults for a single-threaded
workload. Something in the hundreds per second would be a more typical workload.
This makes sense though – a lot of memory movement is happening during program
startup: loading the executable into memory, shared library resolution, and
so on.</li>
</ol>
<h3 id="profiling-with-perf">Profiling with perf</h3>
<p>My go-to profiler is <code>perf(1)</code>. <code>perf</code> works by interrupting the program
periodically and capturing a stacktrace of the currently executing code. For
more details about <code>perf</code>, I recommend <a href="https://www.brendangregg.com/perf.html">Brendan Gregg’s writeup</a>. Here’s
the <code>perf</code> command I ran to profile Node.js’s startup:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="va">LD_LIBRARY_PATH</span><span class="op">=</span>/lib/libc6-prof/x86_64-linux-gnu <span class="dt">\</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">perf</span> record <span class="at">-g</span> <span class="at">-F</span> 299 <span class="at">--</span> bash <span class="at">-c</span> <span class="st">&#39;for i in {1..1000}; do ./node -e 0; done&#39;</span></span></code></pre></div>
<p>Profiling just one execution of node was not very useful, because the runtime
is so short, and so perf does not have much time to sample the execution. Using
a tight loop increased the number of samples. I also chose to use libc6-prof
via <code>LD_LIBRARY_PATH</code>, which is a version of glibc with frame pointers enabled.
Frame pointers are necessary so that <code>perf record</code> can correctly unwind stacks
with <code>-g</code>, otherwise time spent in the C standard library may not be correctly
attributed to its callers. On Debian, you can install this via <code>apt install libc6-prof</code>.</p>
<p>For viewing the collected profiles, I rarely use the included perf-report
interface.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> Using <code>perf script</code>, we can export the stack traces to a
format that can be ingested by other tools. The output format is a series of
stack traces separated by newlines. Each stack trace has a single header line
containing information like the pid and sampling time, followed by the sampled
backtrace. Here’s the first couple of backtraces for our sample:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> perf script <span class="at">-F</span> comm,pid,tid,time,period,event,ip,sym,symoff,dso</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">perf-exec</span> 46503/46503  7797.395284:          1 cycles: </span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="ex">ffffffff93296146</span> native_write_msr+0x6 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="ex">ffffffff9320f1a5</span> intel_pmu_enable_all+0x15 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="ex">ffffffff932092fb</span> x86_pmu_enable+0x1ab <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>	<span class="ex">...</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ex">node</span> 46505/46505  7797.403597:   27382873 cycles: </span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="ex">ffffffff938a2ea7</span> copy_page+0x7 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="ex">ffffffff934fa35e</span> do_fault+0x24e <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="ex">ffffffff934fa9cd</span> handle_pte_fault+0x1cd <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        <span class="ex">...</span></span></code></pre></div>
<p>I wanted to post-process this output to focus on only Node processes. Also
since there was many Node processes, I wanted to collect all of their stack
traces as if they came from one process (by replacing all of their pids to be
the same). Finally I wanted to focus only on stack traces where the pid was
equal to the tid. That indicates the main thread of Node.js, which is where
almost all of the interesting work happens. I ended up crafting this Perl
script:<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode perl"><code class="sourceCode perl"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># By default, we don&#39;t print the stack trace.</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">$b</span> = <span class="dv">0</span> <span class="kw">if</span> <span class="ot">/</span><span class="ch">^</span><span class="bn">\w</span><span class="ot">/</span>;</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Start printing the stack trace if it matches the regex,</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co"># indicating that this is a stack sampled from the main thread</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co"># of a Node process.</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Replace the main thread with a fake aggregated thread of</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="co"># &quot;node 1/1&quot;.</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="dt">$b</span> = <span class="dv">1</span> <span class="kw">if</span> <span class="ot">s@</span><span class="ch">^</span><span class="ot">node </span><span class="ch">([</span><span class="bn">0-9</span><span class="ch">]+)</span><span class="ot">/</span><span class="wa">\1</span><span class="ot">@</span><span class="st">node 1/1</span><span class="ot">@</span>;</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> <span class="kw">if</span> <span class="dt">$b</span></span></code></pre></div>
<p>And as a one-liner:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">perf</span> script <span class="at">-F</span> comm,pid,tid,time,period,event,ip,sym,symoff,dso <span class="dt">\</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">|</span> <span class="fu">perl</span> <span class="at">-n</span> <span class="at">-e</span><span class="st">&#39;$b=0 if/^\w/;$b=1 if s@^node ([0-9]+)/\1@node 1/1@;print if$b&#39;</span></span></code></pre></div>
<p>Aggregating across a bunch of processes means that a timeline view is useless,
but flamegraph visualizations still work fine.</p>
<p>I happily loaded the output script into <a href="https://profiler.firefox.com/">Firefox Profiler</a>. Unfortunately,
more than half of stacks looked purely like <code>perf</code> overhead, mentioning things
like “intel_pmu” (“Performance Monitor Unit”):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">node</span> 1/1  7804.131591:          1 cycles: </span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>	<span class="ex">ffffffff93296146</span> native_write_msr+0x6 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>	<span class="ex">ffffffff9320f1a5</span> intel_pmu_enable_all+0x15 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>	<span class="ex">ffffffff932092fb</span> x86_pmu_enable+0x1ab <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>	<span class="ex">ffffffff9349b09c</span> __perf_event_task_sched_in+0x1ac <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>	<span class="ex">ffffffff932fbf47</span> finish_task_switch.isra.0+0x157 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>	<span class="ex">ffffffff93304891</span> schedule_tail+0x11 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>	<span class="ex">ffffffff93204c88</span> ret_from_fork+0x8 <span class="er">(</span><span class="ex">[kernel.kallsyms]</span><span class="kw">)</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>            <span class="ex">7fa9c7a8256d</span> send_vc+0x4bd <span class="er">(</span><span class="ex">/usr/lib/libc6-prof/x86_64-linux-gnu/libc.so.6</span><span class="kw">)</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>            <span class="ex">7fa9c79ec6d5</span> __strncat_ssse3+0x325 <span class="er">(</span><span class="ex">/usr/lib/libc6-prof/x86_64-linux-gnu/libc.so.6</span><span class="kw">)</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            <span class="ex">7fa9c79ed2bc</span> __strncat_ssse3+0xf0c <span class="er">(</span><span class="ex">/usr/lib/libc6-prof/x86_64-linux-gnu/libc.so.6</span><span class="kw">)</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>        <span class="ex">fffffffeffffffff</span> <span class="pp">[</span><span class="ss">unknown</span><span class="pp">]</span> <span class="er">(</span><span class="ex">[unknown]</span><span class="kw">)</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>            <span class="ex">56367bb5ea70</span> <span class="pp">[</span><span class="ss">unknown</span><span class="pp">]</span> <span class="er">(</span><span class="ex">[unknown]</span><span class="kw">)</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        <span class="ex">48f0ffffffff0000</span> <span class="pp">[</span><span class="ss">unknown</span><span class="pp">]</span> <span class="er">(</span><span class="ex">[unknown]</span><span class="kw">)</span></span></code></pre></div>
<p>Firefox Profiler’s visualizer already provides functionality to drop stack
frames containing certain functions. However it is also possible to filter
out these overhead stacks out with some perl:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode perl"><code class="sourceCode perl"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Don&#39;t print stack traces containing &quot;send_vc&quot; or &quot;perf_event_&quot;.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">$b</span>=<span class="dv">1</span> <span class="kw">if</span> <span class="ot">/send_vc</span><span class="ch">|</span><span class="ot">perf_event_/</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> (<span class="wa">$_</span>) {</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># If the line isn&#39;t empty, append it to the current</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># stack trace.</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">$s</span> = <span class="ot">&quot;</span><span class="dt">$s</span><span class="ch">\n</span><span class="wa">$_</span><span class="ot">&quot;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>} <span class="kw">else</span> {</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    <span class="co"># If this is a newline, decide whether or not to print the</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># stack trace.</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">say</span> <span class="dt">$s</span> <span class="kw">if</span> !<span class="dt">$b</span>;</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Reset for the next block.</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">$b</span> = <span class="dv">0</span>;</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">$s</span> = <span class="ot">&quot;&quot;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Or again as a bash one-liner:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">perl</span> <span class="at">-lanE</span> <span class="st">&#39;if($_){$s=&quot;$s\n$_&quot;}else{say $s if !$b;$b=0;$s=&quot;&quot;};$b=1 if/send_vc|perf_event_/&#39;</span></span></code></pre></div>
<p>Here’s the script, all strung together.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/bin/bash</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-Eeuox</span> pipefail</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="va">LD_LIBRARY_PATH</span><span class="op">=</span>/lib/libc6-prof/x86_64-linux-gnu <span class="dt">\</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">perf</span> record <span class="at">-g</span> <span class="at">-F</span> 299 <span class="at">--</span> bash <span class="at">-c</span> <span class="st">&#39;for i in {1..1000}; do ./node -e 0; done&#39;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ex">perf</span> script <span class="at">-F</span> comm,pid,tid,time,period,event,ip,sym,symoff,dso <span class="dt">\</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span> <span class="fu">perl</span> <span class="at">-n</span> <span class="at">-e</span><span class="st">&#39;$b=0 if/^\w/;$b=1 if s@^node ([0-9]+)/\1@node 1/1@;print if$b&#39;</span> <span class="dt">\</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span> <span class="fu">perl</span> <span class="at">-lanE</span> <span class="st">&#39;if($_){$s=&quot;$s\n$_&quot;}else{say $s if !$b;$b=0;$s=&quot;&quot;};$b=1 if/send_vc|perf_event_/&#39;</span> <span class="dt">\</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span> <span class="fu">sed</span> <span class="st">&#39;1{/^$/d}&#39;</span> <span class="dt">\</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span> <span class="fu">gzip</span> <span class="at">-c</span> <span class="op">&gt;</span> stacks.gz</span></code></pre></div>
<p>I inserted some manual printf statements to measure time and checked that the
results were similar to the CPU times I got from the profiles. This indicated
to me that filtering out these overhead stacks was a reasonable decision.</p>
<p>We can generate an interactive SVG flamegraph using
<a href="https://github.com/brendangregg/FlameGraph">FlameGraph</a>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./flamegraph.pl</span> <span class="at">--inverted</span> <span class="at">--colors</span> js <span class="dt">\</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="at">--title</span> <span class="st">&#39;Node.js startup graph&#39;</span> <span class="dt">\</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;(</span><span class="fu">perl</span> stackcollapse-perf.pl <span class="op">&lt;(</span><span class="fu">gunzip</span> <span class="at">-c</span> ~/node/stacks.gz<span class="op">))</span> <span class="dt">\</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&gt;</span> nodejs-startup-flamegraph.svg</span></code></pre></div>
<p>I included the FlameGraph inline below for your pleasure (<a href="/assets/nodejs-startup-flamegraph.svg">full size
version</a>). Feel free to click
around and see what you can find in advance of the next post in <a href="/tags/nodejs-startup.html">the
series</a>. If you prefer to view this in an
external tool like <a href="https://profiler.firefox.com/">Firefox Profiler</a> or
<a href="https://speedscope.app">Speedscope</a>, you can <a href="/assets/nodejs-startup-stacks.gz">download the profile
here</a>.</p>
<center>
<object type="image/svg+xml" data="/assets/nodejs-startup-flamegraph.svg" style="max-width: 100%">
</object>
</center>
<aside id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>The main advantage of the included interface is being able to look
at samples at a machine code level granularity, i.e. looking at individual
assembly instruction bottlenecks. But usually I almost always want a
higher-level picture.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>If you don’t enjoy Perl, there are way more principled ways to do this
rewriting, e.g. through using perf-script’s support for Python scripts. See
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/perf-script-python.txt"><code>linux/tools/perf/Documentation/perf-script-python.txt</code></a>.
I don’t use it though, because my distro does not compile perf with it, and I’m
too lazy to recompile.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
    </section>
    <section class="header">
        
        Posted on 2023-05-10
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Node.js Startup: Series Introduction &amp; Measuring Startup</title>
    <link href="https://kvakil.me/posts/2023-05-09-nodejs-startup-series-intro-and-measuring-startup-time.html" />
    <id>https://kvakil.me/posts/2023-05-09-nodejs-startup-series-intro-and-measuring-startup-time.html</id>
    <published>2023-05-09T00:00:00Z</published>
    <updated>2023-05-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Node.js Startup: Series Introduction &amp; Measuring Startup</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;nodejs-startup&#39;." href="/tags/nodejs-startup.html" rel="tag">nodejs-startup</a>, <a title="All pages tagged &#39;low-level&#39;." href="/tags/low-level.html" rel="tag">low-level</a></p>
        <p>This blog post is part of <a href="/tags/nodejs-startup.html">a series</a> to see
how much I can optimize Node.js’s startup time. Startup time is
<a href="https://github.com/nodejs/node/issues/45662">something that users care about</a>, especially for interactive
tooling or for workloads with many short-lived processes. The most
important step of performance analysis is measurement, so let’s start by
measuring Node.js’s startup time.</p>
<p>I decided to measure the time to execute <code>node -e 0</code>, which simply evaluates
the no-op expression of “0”. I focused on “warm startup”, i.e. when the
various file system caches were already warm. This felt more realistic since
mostly when you care about startup time, it’s for something you’ll be executing
often, so the operating system will already have the executable and shared
libraries paged in to memory.</p>
<p>Here’s a boxplot of the runtimes of older versions of Node.js, along with the
main branch (“main”, 4b80a7b0c404e). As a teaser for the rest of this series,
I’ve also included my WIP branch (“mine”).</p>
<script type="text/javascript" src="/assets/vega@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-lite@5.js" defer></script>
<script type="text/javascript" src="/assets/vega-embed@6.js" defer></script>
<script type="text/javascript" src="/assets/nodejs-startup-intro-vl.js" defer></script>
<center>
<div id="vis-runtime" style="width: 650px;max-width:100%" data-filename="/assets/node-startup-runtime-data.json" data-title="Startup time of Node.js over the years">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
<p>As you can see, I’ve got a branch where the startup is faster than it’s
been in a long time (at least since 2017). It’s partially offset by a
minor regression in <code>main</code>. There’s not much variance in runtimes, so
the boxplot looks smushed.</p>
<p>Typical process startup is memory intensive, so optimizing startup time will
likely optimize memory usage as well, and vice-versa. Here’s the same graph
except focusing on memory usage.</p>
<center>
<div id="vis-memory" style="width: 650px;max-width:100%" data-filename="/assets/node-startup-memory-data.json" data-title="Unique set size of Node.js over the years">

</div>
<noscript>
Sorry, you need Javascript to view this plot. Do you read this blog
without Javascript? Please email me at <code>ken@kvakil.me</code>.
</noscript>
</center>
<p>It’s not as impressive as the runtime graph unfortunately: again it’s
fighting a regression in <code>main</code>. The final results bring us back to
v17.9.1 (released June 2022), but still 2.3 MiB above the glory days of
15.4.0 (released April 2021).</p>
<p>Node.js also provides its own startup benchmarks, which we can check to verify
our results.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> node benchmark/compare.js <span class="at">--old</span> ./node_main <span class="at">--new</span> ./node <span class="dt">\</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="at">--runs</span> 10 <span class="at">--filter</span> startup misc <span class="op">&gt;</span> results.csv</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> node-benchmark-compare results.csv</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                           <span class="ex">confidence</span> improvement</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ex">process</span> require-builtins   <span class="pp">***</span>        35.96 %</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ex">process</span> semicolon          <span class="pp">***</span>        37.63 %</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ex">worker</span>  require-builtins   <span class="pp">***</span>        34.96 %</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="ex">worker</span>  semicolon          <span class="pp">***</span>        34.80 %</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">0.00</span> false positives, when considering a 0.1% risk acceptance <span class="er">(</span><span class="ex">***</span><span class="kw">)</span></span></code></pre></div>
<p>In addition to speeding up the no-op benchmark (semicolon), we’ll also
be speeding up the overall performance of requiring Node.js’s builtin
library (require-builtins).</p>
<p><em>Check out <a href="/tags/nodejs-startup.html">the rest of this series</a> to see
how we’ll achieve this amazing feat!</em></p>
<hr />
<h3 id="extra-how-i-made-the-graphs">Extra: How I made the graphs</h3>
<p>All steps were performed on an Amazon EC2 Linux instance running Debian
10. First, I downloaded a bunch of old versions of Node.js using
<a href="https://github.com/ekalinin/nodeenv"><code>nodeenv</code></a>.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> n <span class="kw">in</span> 9.11.2 11.15.0 13.14.0 15.14.0 17.9.1 19.9.0<span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">nodeenv</span> <span class="va">$n</span> <span class="at">-n</span> <span class="va">$n</span> <span class="kw">&amp;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="bu">wait</span></span></code></pre></div>
<p>I also built the “main” branch on the day where I started this project
(SHA 4b80a7b0c404e) as a comparison point. I did so by creating a
release tarball via <code>CUSTOMTAG=t DISTTYPE=custom make -j$(nproc) binary</code>, and extracting it to <code>main/</code>.</p>
<p>I used <a href="https://github.com/sharkdp/hyperfine"><code>hyperfine</code></a> to benchmark the runtime. Executing warmup
iterations via <code>--warmup</code> was important to avoid outliers, since
Node.js’s startup is very IO heavy.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">hyperfine</span> <span class="at">--export-json</span> timings.json <span class="dt">\</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="at">-L</span> node_version 9.11.2,11.15.0,13.14.0,15.14.0,17.9.1,19.9.0,main,mine <span class="dt">\</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">--shell</span><span class="op">=</span>none <span class="at">--warmup</span> 100 <span class="st">&#39;./{node_version}/bin/node -e 0&#39;</span></span></code></pre></div>
<p>This exports a <code>timings.json</code> file. Although <code>hyperfine</code> comes with some
utilities for graphing it, I prefer <a href="https://vega.github.io/vega-lite/">Vega-Lite</a>. Vega-Lite’s builtin
transform functionality is sufficient to convert hyperfine’s format into one
that Vega-Lite can use for graphing:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;$schema&quot;</span><span class="fu">:</span> <span class="st">&quot;https://vega.github.io/schema/vega-lite/v5.json&quot;</span><span class="fu">,</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;data&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;url&quot;</span><span class="fu">:</span> <span class="st">&quot;/assets/node-startup-runtime-data.json&quot;</span><span class="fu">,</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;format&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;json&quot;</span><span class="fu">,</span> <span class="dt">&quot;property&quot;</span><span class="fu">:</span> <span class="st">&quot;results&quot;</span><span class="fu">}</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">},</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;transform&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span><span class="dt">&quot;flatten&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;times&quot;</span><span class="ot">]</span><span class="fu">}</span><span class="ot">,</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span><span class="dt">&quot;calculate&quot;</span><span class="fu">:</span> <span class="st">&quot;1000*datum.times&quot;</span><span class="fu">,</span> <span class="dt">&quot;as&quot;</span><span class="fu">:</span> <span class="st">&quot;times&quot;</span><span class="fu">}</span><span class="ot">,</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;mark&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;boxplot&quot;</span><span class="fu">,</span> <span class="dt">&quot;extent&quot;</span><span class="fu">:</span> <span class="st">&quot;min-max&quot;</span><span class="fu">},</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;encoding&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;x&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;field&quot;</span><span class="fu">:</span> <span class="st">&quot;parameters.node_version&quot;</span><span class="fu">,</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="st">&quot;Node.js version&quot;</span><span class="fu">,</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;nominal&quot;</span><span class="fu">,</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;sort&quot;</span><span class="fu">:</span> <span class="ot">[]</span><span class="fu">,</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;axis&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;labelAngle&quot;</span><span class="fu">:</span> <span class="dv">0</span><span class="fu">}</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;y&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;field&quot;</span><span class="fu">:</span> <span class="st">&quot;times&quot;</span><span class="fu">,</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;quantitative&quot;</span><span class="fu">,</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="st">&quot;Time (ms)&quot;</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;color&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="st">&quot;Node.js version&quot;</span><span class="fu">,</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;field&quot;</span><span class="fu">:</span> <span class="st">&quot;parameters.node_version&quot;</span><span class="fu">,</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;nominal&quot;</span><span class="fu">,</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;sort&quot;</span><span class="fu">:</span> <span class="ot">[]</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>  <span class="fu">},</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;config&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;numberFormat&quot;</span><span class="fu">:</span> <span class="st">&quot;.3&quot;</span><span class="fu">},</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;text&quot;</span><span class="fu">:</span> <span class="st">&quot;Startup time of Node.js over the years&quot;</span><span class="fu">},</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;width&quot;</span><span class="fu">:</span> <span class="st">&quot;container&quot;</span><span class="fu">,</span> <span class="dt">&quot;height&quot;</span><span class="fu">:</span> <span class="dv">500</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>To measure memory usage, I decided to look at “unique set size” (USS). Unique
set size is a measure of how much memory an individual process adds, i.e.
excluding any memory shared by any other process. Resident set size (RSS) is
also interesting, but it includes <em>all</em> the process’s memory, a lot of which
will be shared (like shared libraries, the node binary itself, etc.), so it’s
not as meaningful for our purposes. USS is measured by <a href="https://www.selenic.com/smem/"><code>smem</code></a>, but
actually collecting the data required some ugly Bash:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="dt">{</span><span class="dv">1</span><span class="dt">..</span><span class="dv">30</span><span class="dt">}</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> n <span class="kw">in</span> 9.11.2 11.15.0 13.14.0 15.14.0 17.9.1 19.9.0 main mine<span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Fire off two node processes, so that the executable and</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># shared libraries will be shared.</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">$n</span><span class="ex">/bin/node</span> <span class="at">--expose-gc</span> <span class="at">-e</span> <span class="st">&#39;gc(),gc();while(1);&#39;</span> <span class="kw">&amp;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">$n</span><span class="ex">/bin/node</span> <span class="at">--expose-gc</span> <span class="at">-e</span> <span class="st">&#39;gc(),gc();while(1);&#39;</span> <span class="kw">&amp;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Delay until startup/GCs hopefully finish.</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">sleep</span> 1</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Collect the memory used by all processes.</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="ex">smem</span> <span class="kw">|</span> <span class="fu">tee</span> <span class="at">-a</span> <span class="va">$n</span>/smem_results</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Kill the node processes.</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">kill</span> <span class="va">$(</span><span class="bu">jobs</span> <span class="at">-p</span><span class="va">)</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">done</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span></code></pre></div>
<p>And now some <em>extra ugly</em> Bash to convert it into JSON. Note that each <code>smem</code>
call gives us two node processes, so we use <code>paste</code>/<code>awk</code> to select the one
which has a larger USS.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> n <span class="kw">in</span> 9.11.2 11.15.0 13.14.0 15.14.0 17.9.1 19.9.0 main mine<span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="bu">printf</span> <span class="st">&#39;{&quot;node_version&quot;:&quot;%s&quot;,&quot;memory&quot;:[%s]},\n&#39;</span> <span class="va">$n</span> <span class="dt">\</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>      <span class="va">$(</span><span class="op">&lt;</span> <span class="va">$n</span>/smem_results <span class="fu">grep</span> /node <span class="dt">\</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>          <span class="kw">|</span> <span class="fu">awk</span> <span class="st">&#39;{print $(NF-2)}&#39;</span> <span class="dt">\</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>          <span class="kw">|</span> <span class="fu">paste</span> <span class="at">-</span> <span class="at">-</span> <span class="kw">|</span> <span class="fu">awk</span> <span class="st">&#39;{print ($1&gt;$2?$1:$2)}&#39;</span> <span class="dt">\</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>          <span class="kw">|</span> <span class="fu">paste</span> <span class="at">-sd,</span><span class="va">)</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span></code></pre></div>
<p>And finally, the data goes into Vega-Lite to make a pretty chart.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;$schema&quot;</span><span class="fu">:</span> <span class="st">&quot;https://vega.github.io/schema/vega-lite/v5.json&quot;</span><span class="fu">,</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;data&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;url&quot;</span><span class="fu">:</span> <span class="st">&quot;/assets/node-startup-memory-data.json&quot;</span><span class="fu">,</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;format&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;json&quot;</span><span class="fu">}</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">},</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;transform&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span><span class="dt">&quot;flatten&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;memory&quot;</span><span class="ot">]</span><span class="fu">}</span><span class="ot">,</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span><span class="dt">&quot;calculate&quot;</span><span class="fu">:</span> <span class="st">&quot;datum.memory/1024&quot;</span><span class="fu">,</span> <span class="dt">&quot;as&quot;</span><span class="fu">:</span> <span class="st">&quot;memory&quot;</span><span class="fu">}</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;mark&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;boxplot&quot;</span><span class="fu">,</span> <span class="dt">&quot;extent&quot;</span><span class="fu">:</span> <span class="st">&quot;min-max&quot;</span><span class="fu">},</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;encoding&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;x&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;field&quot;</span><span class="fu">:</span> <span class="st">&quot;node_version&quot;</span><span class="fu">,</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="st">&quot;Node.js version&quot;</span><span class="fu">,</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;nominal&quot;</span><span class="fu">,</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;sort&quot;</span><span class="fu">:</span> <span class="ot">[]</span><span class="fu">,</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;axis&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;labelAngle&quot;</span><span class="fu">:</span> <span class="dv">0</span><span class="fu">}</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;y&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;field&quot;</span><span class="fu">:</span> <span class="st">&quot;memory&quot;</span><span class="fu">,</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;quantitative&quot;</span><span class="fu">,</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="st">&quot;Unique Set Size (MiB)&quot;</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;color&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="st">&quot;Node.js version&quot;</span><span class="fu">,</span></span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;field&quot;</span><span class="fu">:</span> <span class="st">&quot;node_version&quot;</span><span class="fu">,</span></span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;nominal&quot;</span><span class="fu">,</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;sort&quot;</span><span class="fu">:</span> <span class="ot">[]</span></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>  <span class="fu">},</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;config&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;numberFormat&quot;</span><span class="fu">:</span> <span class="st">&quot;.2&quot;</span><span class="fu">},</span></span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;text&quot;</span><span class="fu">:</span> <span class="st">&quot;Unique set size of Node.js over the years&quot;</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>  <span class="fu">},</span></span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;width&quot;</span><span class="fu">:</span> <span class="st">&quot;container&quot;</span><span class="fu">,</span></span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;height&quot;</span><span class="fu">:</span> <span class="dv">500</span></span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
    </section>
    <section class="header">
        
        Posted on 2023-05-09
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Unwinding Node.js/V8 Javascript stacks in eBPF</title>
    <link href="https://kvakil.me/posts/2022-10-17-ustackjs-unwind-javascript-stacks-in-ebpf.html" />
    <id>https://kvakil.me/posts/2022-10-17-ustackjs-unwind-javascript-stacks-in-ebpf.html</id>
    <published>2022-10-17T00:00:00Z</published>
    <updated>2022-10-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section>
        <h2>Unwinding Node.js/V8 Javascript stacks in eBPF</h2>
        <p><i>Tags:</i> <a title="All pages tagged &#39;low-level&#39;." href="/tags/low-level.html" rel="tag">low-level</a></p>
        <p><code>ustackjs</code> is a Node.js/V8 Javascript stack unwinder in eBPF, allowing
you to view backtraces for native C++ code. It is <a href="https://git.sr.ht/~kvakil/ustackjs">available here</a>.</p>
<p>To see how to use it, let’s consider the following Javascript program.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">foo</span>() { <span class="cf">return</span> <span class="kw">new</span> <span class="bu">Uint8Array</span>(<span class="dv">1024</span>)<span class="op">;</span> }</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">bar</span>() { <span class="fu">foo</span>()<span class="op">;</span> }</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">bar</span>()<span class="op">;</span></span></code></pre></div>
<p>Allocating a <code>Uint8Array</code> eventually calls a C++ function known as
“<code>v8::Isolate::AdjustAmountOfExternalAllocatedMemory</code>”. You can trace calls to
this function using <code>ustackjs</code>. First, we will need to get the <em>mangled</em> name:</p>
<pre class="console"><code>$ nm `which node` | grep AdjustAmountOfExternalAllocatedMemory
0000000000b9ac00 T _ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...</code></pre>
<p>Now we can pass that to <code>ustackjs.py</code> to see all the callsites.</p>
<pre class="console allow-wrap"><code>$ sudo python3 ustackjs.py --node `which node` \
        _ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl

5845 5845 5845 12888.364267112: 1 event:
 561614bf9f40 v8::internal::Builtin_ArrayBufferConstructor(int, unsigned long*, v8::internal::Isolate*)+0x120 ([node])
 5616155ecd79 Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit+0x39 ([node])
 56161556e7ec Builtins_JSBuiltinsConstructStub+0xec ([node])
 561615660652 Builtins_CreateTypedArray+0x892 ([node])
 5616155de2c7 Builtins_TypedArrayConstructor+0x87 ([node])
 56161556e7ec Uint8Array ([js])
 561595706add [unknown]
 561595706bb6 foo ([js])
 561595706cb6 bar ([js])
#        ...</code></pre>
<p>There are both C++ functions, like <code>Builtins_CreateTypedArray</code>, and
Javascript functions (<code>foo</code> and <code>bar</code>).</p>
<p>The output is in <code>perf-script(1)</code> format, which lets you import it into
various tools like <a href="https://speedscope.app">Speedscope</a>.</p>
<p>This functionality of tracing calls to a particular native function is
useful, but of course it may not quite be what you want. For example,
you may want to trace system calls, capture the arguments passed to the
function, etc.. Since the tool is open-source, you can modify
<code>ustackjs</code> to your liking in order to capture whatever information you
need.</p>
<p>To my knowledge, this is the first tool of its class for Node.js/V8.
Similar tools exist for other interpreted languages, like Python or
Ruby, but Javascript is particularly complicated because of its JIT. And
while tools like <code>perf</code> or <code>gdb</code> can be used for native stack traces,
neither of those support low-overhead ways to get backtraces
like eBPF can!</p>
<h2 id="how-it-works">How it works</h2>
<p>I adapted the algorith here from <a href="https://github.com/nodejs/llnode/blob/2ae10dd5b47d52c1ff6d7f4869adb164f300ea10/src/llv8-inl.h#L1108">llnode</a>, which can get the backtrace
from a coredump. There is not too much to it, since V8 actually makes
unwinding pretty easy. Essentially the register <code>rbp</code> points to the
saved frame pointer (i.e., the <code>rbp</code> of the previous function). For
Javascript frames, you can traverse some nearby objects to eventually
get to the name of the function. For C++ frames, you’ll realize that it
doesn’t work the Javascript unwinding fails. Then you can set <code>rbp &lt;- old rbp</code> and keep unwinding, until you eventually reach some maximum
limit or fail to unwind.</p>
<p>Here are the gory details in a picture, showing the pointers you need to
traverse to get the name of a Javascript function.</p>
<pre><code>┌──────────────────────────┐
│ return address           │
├──────────────────────────┤
│ saved frame pointer    ◄─┼─ rbp
├──────────────────────────┤
│ &quot;context&quot;                │
├──────────────────────────┤
│ JSFunction pointer   ────┼──┐
└──────────────────────────┘  │
                              │
┌──────────────────────────┐  │
│ JSFunction map         ◄─┼──┘
├──────────────────────────┤
│                          │
│          ...             │
│                          │
├──────────────────────────┤
│ SharedFunctionInfo ptr  ─┼───┐
└──────────────────────────┘   │
                               │
┌──────────────────────────┐   │
│ SharedFunctionInfo map ◄─┼───┘
├──────────────────────────┤
│                          │
│          ...             │
├──────────────────────────┤
│ name or scope info ptr  ─┼───┐
└──────────────────────────┘   │
                               │
┌──────────────────────────┐   │
│ ScopeInfo map          ◄─┼───┘
├──────────────────────────┤
│          ...             │
├──────────────────────────┤
│ context_local_count      │
├──────────────────────────┤
│  followed by             │
│  2 * context_local_count │
│  8-byte words            │
├──────────────────────────┤
│ name pointer             ┼───┐
└──────────────────────────┘   │
                               │
┌──────────────────────────┐   │
│ String map             ◄─┼───┤
├──────────────────────────┤   │
│ length of string         │   │
├──────────────────────────┤   │
│ string data: &quot;foo&quot;       │   │
└──────────────────────────┘   │
                               │
┌──────────────────────────┐   │
│Root map pointer        ◄─┼───┘
├──────────────────────────┤
│instance type             │
└──────────────────────────┘</code></pre>
<h2 id="is-it-safe-to-use">Is it safe to use?</h2>
<p>I have not formally measured the overhead of this, my current guesstimate is
somewhere in the double-digit microseconds per stack trace. I recommend running
with a low value of <code>--max-depth</code> and <code>--max-function-name-length</code>, and turning
it up carefully until you get enough information to debug whatever you’re
looking at.</p>
<h2 id="whats-left-to-do">What’s left to do?</h2>
<p>This was more of a proof-of-concept, although I’ve already found it
surprisingly useful. Here are some things which are missing and could be nice
additions:</p>
<ul>
<li>Precisely quantify the performance impact.</li>
<li>Get various constants from the binary, rather than hardcoding them. <code>llnode</code>
uses “<code>v8dbg_*</code>” symbols, which lets it work across different Node.js versions.</li>
<li>Cache some data until a GC occurs. This can avoid pointer chasing, which
is probably not great for performance.</li>
<li>Support other types of strings. Currently we only support “one-byte seq strings”.
This means that we can’t always print out the Javascript function name –
for example we’ll choke on anything which has unicode. There is a tradeoff
here in that supporting more types of strings is slower.</li>
<li>Don’t probe 4 slots for the right string. Right now this copies a hack from
llnode – it actually tries multiple offsets in <code>ScopeInfo</code> to find the location
of the function name. We should be able to get the exact slot at the cost
of some additional code complexity.</li>
<li>Some support for inlining. It would be nice if we could optionally detect
inlining and correctly unwind it. This needs to be optional as the performance
hit is likely quite high.</li>
<li>Support WebAssembly functions.</li>
</ul>
    </section>
    <section class="header">
        
        Posted on 2022-10-17
    </section>
</article>
]]></summary>
</entry>

</feed>
